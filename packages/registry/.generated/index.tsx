// This file is autogenerated by scripts/build-registry.js
// Do not edit this file directly.
import * as React from "react";

interface ComponentInfo {
  name: string;
  description: string;
  type: string;
  registryDependencies: string[];
  files: Array<{
    path: string;
    type: string;
    target: string;
  }>;
  component: React.LazyExoticComponent<React.ComponentType<any>>;
  source?: string;
  meta: {
    tags: string[];
  };
}

export const Index: Record<string, ComponentInfo> = {
  "button": {
    name: "button",
    description: "Advanced button component with motion effects, haptic feedback, and state management",
    type: "registry:ui",
    registryDependencies: ["utils"],
    files: [{
        path: "registry/default/ui/button.tsx",
        type: "registry:ui",
        target: "components/upkit/button.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/ui/button") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button\n * @title Enhanced Button Component\n * @type registry:ui\n * @description Advanced button component with motion effects, haptic feedback, and state management\n * @categories [\"buttons\", \"ui\", \"interactions\"]\n * @tags [\"button\", \"motion\", \"haptics\", \"accessibility\", \"interactive\"]\n * @dependencies [\"@radix-ui/react-slot\", \"class-variance-authority\", \"motion\"]\n * @author ux-patterns\n */\n\"use client\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport type { HTMLMotionProps } from \"motion/react\";\nimport * as Motion from \"motion/react-client\";\nimport {\n\tChildren,\n\tcloneElement,\n\tforwardRef,\n\ttype HTMLAttributes,\n\ttype KeyboardEvent,\n\ttype MouseEvent,\n\ttype ReactElement,\n\tuseCallback,\n\tuseImperativeHandle,\n\tuseLayoutEffect,\n\tuseRef,\n\tuseState,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\n\n/* ================= Loading Components ================= */\nconst Spinner = ({\n\tclassName,\n\t...props\n}: HTMLAttributes<HTMLOutputElement>) => (\n\t<output\n\t\tclassName={cn(\n\t\t\t\"inline-block h-4 w-4 animate-spin rounded-full border-2 border-solid border-current border-r-transparent\",\n\t\t\tclassName,\n\t\t)}\n\t\t{...props}\n\t>\n\t\t<span className=\"sr-only\">Loading...</span>\n\t</output>\n);\n\nconst Dots = ({ className, ...props }: HTMLAttributes<HTMLSpanElement>) => (\n\t<span className={cn(\"inline-flex gap-1\", className)} {...props}>\n\t\t<span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current [animation-delay:-0.3s]\"></span>\n\t\t<span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current [animation-delay:-0.15s]\"></span>\n\t\t<span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current\"></span>\n\t</span>\n);\n\n/* ================= Configuration Objects ================= */\nconst HAPTIC_PATTERNS = {\n\tlight: 10,\n\tmedium: 20,\n\theavy: 30,\n} as const;\n\nconst SOUND_CONFIGS = {\n\tsubtle: { frequency: 400, gain: 0.03, duration: 0.05 },\n\tclick: { frequency: 600, gain: 0.05, duration: 0.05 },\n} as const;\n\n/* ================= Utility Functions ================= */\nconst triggerHaptics = (intensity: \"off\" | \"light\" | \"medium\" | \"heavy\") => {\n\tif (intensity === \"off\" || typeof navigator === \"undefined\") return;\n\n\tif (\"vibrate\" in navigator) {\n\t\tnavigator.vibrate(HAPTIC_PATTERNS[intensity]);\n\t}\n};\n\nconst playSound = (type: \"off\" | \"subtle\" | \"click\") => {\n\tif (type === \"off\" || typeof window === \"undefined\") return;\n\n\ttry {\n\t\tconst audioContext = new (\n\t\t\twindow.AudioContext || (window as any).webkitAudioContext\n\t\t)();\n\t\tconst oscillator = audioContext.createOscillator();\n\t\tconst gainNode = audioContext.createGain();\n\t\tconst config = SOUND_CONFIGS[type];\n\n\t\toscillator.connect(gainNode);\n\t\tgainNode.connect(audioContext.destination);\n\t\toscillator.frequency.value = config.frequency;\n\t\tgainNode.gain.value = config.gain;\n\n\t\toscillator.start();\n\t\toscillator.stop(audioContext.currentTime + config.duration);\n\t\t\n\t\tconst teardown = () => {\n\t\t\ttry {\n\t\t\t\tgainNode.disconnect();\n\t\t\t\toscillator.disconnect();\n\t\t\t\taudioContext.close().catch(() => {});\n\t\t\t} catch {}\n\t\t};\n\t\t// OscillatorNode emits \"ended\" when it stops\n\t\t(oscillator as any).addEventListener?.(\"ended\", teardown);\n\t\t// Fallback in case the event isn't supported\n\t\tsetTimeout(teardown, (config.duration + 0.05) * 1000);\n\t} catch {\n\t\t// Silently fail if Web Audio API is not available\n\t}\n};\n\n/* ================= Custom Hooks ================= */\n/**\n * Hook to manage ripple effect animation\n */\nconst useRippleEffect = (enabled: boolean) => {\n\tconst [rippleKey, setRippleKey] = useState<string | null>(null);\n\tconst [ripplePosition, setRipplePosition] = useState({ x: 0, y: 0 });\n\n\tconst triggerRipple = useCallback(\n\t\t(e: MouseEvent<HTMLButtonElement>) => {\n\t\t\tif (!enabled) return;\n\n\t\t\tconst rect = e.currentTarget.getBoundingClientRect();\n\t\t\tconst x = e.clientX - rect.left;\n\t\t\tconst y = e.clientY - rect.top;\n\t\t\tsetRipplePosition({ x, y });\n\t\t\tsetRippleKey(`${x}-${y}-${Date.now()}`);\n\t\t},\n\t\t[enabled],\n\t);\n\n\tconst RippleElement = rippleKey ? (\n\t\t<Motion.span\n\t\t\tkey={rippleKey}\n\t\t\tclassName=\"absolute rounded-full pointer-events-none bg-white dark:bg-black\"\n\t\t\tinitial={{ scale: 0, opacity: 0.4 }}\n\t\t\tanimate={{ scale: 4, opacity: 0 }}\n\t\t\ttransition={{ duration: 0.6, ease: \"easeOut\" }}\n\t\t\tstyle={{\n\t\t\t\tleft: ripplePosition.x,\n\t\t\t\ttop: ripplePosition.y,\n\t\t\t\twidth: \"100px\",\n\t\t\t\theight: \"100px\",\n\t\t\t\ttransform: \"translate(-50%, -50%)\",\n\t\t\t}}\n\t\t\tonAnimationEnd={() => setRippleKey(null)}\n\t\t/>\n\t) : null;\n\n\treturn { triggerRipple, RippleElement };\n};\n\n/**\n * Hook to manage long press interactions\n */\nconst useLongPress = (config?: {\n\tduration?: number;\n\tonLongPress?: () => void;\n}) => {\n\tconst [pressTimer, setPressTimer] = useState<number | null>(null);\n\n\tconst startLongPress = useCallback(() => {\n\t\tif (!config?.onLongPress) return;\n\t\tconst id = window.setTimeout(\n\t\t\t() => config.onLongPress?.(),\n\t\t\tconfig.duration ?? 500,\n\t\t);\n\t\tsetPressTimer(id);\n\t}, [config]);\n\n\tconst clearLongPress = useCallback(() => {\n\t\tif (pressTimer) window.clearTimeout(pressTimer);\n\t\tsetPressTimer(null);\n\t}, [pressTimer]);\n\n\treturn { startLongPress, clearLongPress };\n};\n\n/* ================= Type Definitions ================= */\nexport type ButtonState = \"idle\" | \"loading\" | \"success\" | \"error\" | \"disabled\";\nexport type ButtonClickEffect =\n\t| \"none\"\n\t| \"scale\"\n\t| \"ripple\"\n\t| \"pulse\"\n\t| \"spring\";\nexport type ButtonHoverEffect = \"none\" | \"glow\" | \"lift\";\nexport type LoadingType = \"spinner\" | \"dots\";\n\n/* ================= Button Variants Configuration ================= */\nconst buttonVariants = cva(\n\t\"inline-flex items-center justify-center font-medium cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-60 aria-disabled:cursor-not-allowed aria-disabled:opacity-60 transition-[background,shadow,transform] select-none\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tsolid:\n\t\t\t\t\t\"bg-primary text-primary-foreground shadow hover:enabled:bg-primary/90 aria-disabled:hover:bg-primary\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border-2 border-primary/50 bg-transparent hover:enabled:bg-primary/5 hover:enabled:border-primary/70 aria-disabled:hover:bg-transparent aria-disabled:hover:border-primary/50\",\n\t\t\t\tghost:\n\t\t\t\t\t\"hover:enabled:bg-accent hover:enabled:text-accent-foreground aria-disabled:hover:bg-transparent aria-disabled:hover:text-current\",\n\t\t\t\tlink: \"text-primary hover:enabled:text-primary/80\",\n\t\t\t\tsoft: \"bg-primary/10 text-primary hover:enabled:bg-primary/20 aria-disabled:hover:bg-primary/10\",\n\t\t\t\tdanger:\n\t\t\t\t\t\"bg-red-600 text-white hover:enabled:bg-red-700 aria-disabled:hover:bg-red-600 focus-visible:ring-red-500\",\n\t\t\t\tsuccess:\n\t\t\t\t\t\"bg-emerald-600 text-white hover:enabled:bg-emerald-700 aria-disabled:hover:bg-emerald-600 focus-visible:ring-emerald-500\",\n\t\t\t\twarning:\n\t\t\t\t\t\"bg-amber-500 text-black hover:enabled:bg-amber-600 aria-disabled:hover:bg-amber-500 focus-visible:ring-amber-500\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\txs: \"h-7 min-w-[2.5rem] gap-1.5 px-2 text-[0.78rem]\",\n\t\t\t\tsm: \"h-8 min-w-[3rem] gap-1.5 px-3 text-[0.85rem]\",\n\t\t\t\tmd: \"h-10 min-w-[4rem] gap-2 px-4 text-[0.925rem]\",\n\t\t\t\tlg: \"h-12 min-w-[4.5rem] gap-2 px-5 text-[1rem]\",\n\t\t\t},\n\t\t\tclickEffect: {\n\t\t\t\tnone: \"\",\n\t\t\t\tscale: \"active:scale-[0.98]\",\n\t\t\t\tripple: \"relative overflow-hidden\",\n\t\t\t\tpulse: \"\",\n\t\t\t\tspring: \"\",\n\t\t\t},\n\t\t\thoverEffect: {\n\t\t\t\tnone: \"\",\n\t\t\t\tglow: \"hover:shadow-[0_0_20px_rgba(59,130,246,0.35)]\",\n\t\t\t\tlift: \"hover:-translate-y-0.5 transition-transform\",\n\t\t\t},\n\t\t\twide: { true: \"w-full\", false: \"\" },\n\t\t\trounded: {\n\t\t\t\tdefault: \"rounded-[var(--btn-radius,0.55rem)]\",\n\t\t\t\tpill: \"rounded-full\",\n\t\t\t},\n\t\t\tshadow: {\n\t\t\t\tnone: \"\",\n\t\t\t\tsm: \"shadow-sm\",\n\t\t\t\tmd: \"shadow-md\",\n\t\t\t\tlg: \"shadow-lg\",\n\t\t\t\tcolored: \"\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"solid\",\n\t\t\tsize: \"md\",\n\t\t\tclickEffect: \"scale\",\n\t\t\thoverEffect: \"none\",\n\t\t\twide: false,\n\t\t\trounded: \"default\",\n\t\t\tshadow: \"none\",\n\t\t},\n\t\tcompoundVariants: [\n\t\t\t{\n\t\t\t\tvariant: \"danger\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-red-500/25\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tvariant: \"success\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-emerald-500/25\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tvariant: \"warning\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-amber-500/25\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tvariant: \"solid\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-primary/25\",\n\t\t\t},\n\t\t],\n\t},\n);\n\n/* ================= Button Props Interface ================= */\n/**\n * Enhanced button component with motion effects, haptic feedback, and advanced state management.\n * Extends HTML button with Framer Motion support and interactive features.\n */\nexport type ButtonProps = HTMLMotionProps<\"button\"> &\n\tVariantProps<typeof buttonVariants> & {\n\t\tasChild?: boolean;\n\t\t/** Visual and interactive state of the button */\n\t\tstate?: ButtonState;\n\t\t/** Loading indicator style (spinner or dots) */\n\t\tloadingType?: LoadingType;\n\t\t/** Text displayed during loading state */\n\t\tloadingText?: string;\n\t\t/** Text displayed on success */\n\t\tsuccessText?: string;\n\t\t/** Text displayed on error */\n\t\terrorText?: string;\n\t\tpreventDoubleClick?: boolean;\n\t\t/** Long press configuration for desktop and mobile */\n\t\tlongPress?: { duration?: number; onLongPress?: () => void };\n\t\ttooltipWhenDisabled?: string;\n\t\tpreserveWidth?: boolean;\n\t\t/** Haptic feedback intensity (mobile devices with vibration API) */\n\t\thaptics?: \"off\" | \"light\" | \"medium\" | \"heavy\";\n\t\t/** Audio feedback on interaction */\n\t\tsound?: \"off\" | \"subtle\" | \"click\";\n\t\tannounceChanges?: boolean;\n\t\tanalytics?: { event: string; payload?: Record<string, unknown> };\n\t\tonAction?: () => Promise<void> | void;\n\t\t/** Enable console debugging for button interactions */\n\t\tdebug?: boolean;\n\t\t/** Force native HTML disabled attribute instead of aria-disabled */\n\t\tforceNativeDisabled?: boolean;\n\t};\n\n/* ================= Motion Animation Helpers ================= */\nconst getMotionProps = (\n\tclickEffect?: ButtonClickEffect | null,\n\thoverEffect?: ButtonHoverEffect | null,\n): any => {\n\tconst props: any = {};\n\n\t// Click effect animations\n\tswitch (clickEffect) {\n\t\tcase \"scale\":\n\t\t\tprops.whileTap = { scale: 0.98 };\n\t\t\tprops.transition = { duration: 0.1 };\n\t\t\tbreak;\n\t\tcase \"pulse\":\n\t\t\t// Pulse effect handled by click state\n\t\t\tbreak;\n\t\tcase \"spring\":\n\t\t\tprops.whileTap = { scale: 0.95 };\n\t\t\tprops.transition = { type: \"spring\", stiffness: 400, damping: 17 };\n\t\t\tbreak;\n\t}\n\n\t// Hover effect animations\n\tswitch (hoverEffect) {\n\t\tcase \"glow\":\n\t\t\tprops.whileHover = {\n\t\t\t\tboxShadow: \"0 0 25px rgba(var(--primary-rgb, 59,130,246), 0.5)\",\n\t\t\t};\n\t\t\tif (!props.transition) props.transition = { duration: 0.3 };\n\t\t\tbreak;\n\t\tcase \"lift\":\n\t\t\t// Lift effect handled by CSS classes\n\t\t\tbreak;\n\t}\n\n\treturn props;\n};\n\n/* ================= Main Button Component ================= */\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\tchildren,\n\t\t\tvariant,\n\t\t\tsize,\n\t\t\tclickEffect,\n\t\t\thoverEffect,\n\t\t\twide,\n\t\t\trounded,\n\t\t\tshadow,\n\t\t\tasChild = false,\n\t\t\tstate = \"idle\",\n\t\t\tloadingType = \"spinner\",\n\t\t\tloadingText = \"Working…\",\n\t\t\tsuccessText = \"Done\",\n\t\t\terrorText = \"Try again\",\n\t\t\tpreventDoubleClick = true,\n\t\t\tlongPress,\n\t\t\ttooltipWhenDisabled,\n\t\t\tpreserveWidth = true,\n\t\t\thaptics: hapticPref = \"off\",\n\t\t\tsound: soundPref = \"off\",\n\t\t\tannounceChanges,\n\t\t\tanalytics,\n\t\t\tonAction,\n\t\t\tdebug,\n\t\t\tdisabled,\n\t\t\tforceNativeDisabled = false,\n\t\t\ttype = \"button\",\n\t\t\tonClick,\n\t\t\tonMouseDown,\n\t\t\tonKeyDown,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\t/* ========== Internal State Management ========== */\n\t\tconst btnRef = useRef<HTMLButtonElement>(null);\n\t\tuseImperativeHandle(ref, () => btnRef.current as HTMLButtonElement);\n\n\t\tconst [minWidth, setMinWidth] = useState<number>();\n\t\tconst [isClicking, setIsClicking] = useState(false);\n\t\tconst [isPulsing, setIsPulsing] = useState(false);\n\t\tconst effectiveDisabled = disabled || state === \"disabled\";\n\n\t\t/* ========== Custom Hooks ========== */\n\t\tconst { triggerRipple, RippleElement } = useRippleEffect(\n\t\t\tclickEffect === \"ripple\",\n\t\t);\n\t\tconst { startLongPress, clearLongPress } = useLongPress(longPress);\n\n\t\t/* ========== Width Preservation ========== */\n\t\tuseLayoutEffect(() => {\n\t\t\tif (!preserveWidth || !btnRef.current) return;\n\t\t\tconst el = btnRef.current;\n\t\t\tconst capture = () => setMinWidth((w) => w ?? el.offsetWidth);\n\t\t\tel.addEventListener(\"mousedown\", capture, { once: true });\n\t\t\tel.addEventListener(\"touchstart\", capture, { once: true, passive: true });\n\t\t\treturn () => {\n\t\t\t\tel.removeEventListener(\"mousedown\", capture);\n\t\t\t\tel.removeEventListener(\"touchstart\", capture);\n\t\t\t};\n\t\t}, [preserveWidth]);\n\n\t\t/* ========== Event Handlers ========== */\n\t\tconst handleClick = async (\n\t\t\te: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>\n\t\t) => {\n\t\t\t// Check disabled/loading state BEFORE calling onClick\n\t\t\tif (effectiveDisabled || state === \"loading\") return;\n\t\t\tif (preventDoubleClick && isClicking) return;\n\t\t\t\n\t\t\tonClick?.(e as any);\n\t\t\tif (e.defaultPrevented) return;\n\n\t\t\t// Trigger pulse animation\n\t\t\tif (clickEffect === \"pulse\") {\n\t\t\t\tsetIsPulsing(true);\n\t\t\t\tsetTimeout(() => setIsPulsing(false), 2000); // Stop after 2 seconds (1 pulse)\n\t\t\t}\n\n\t\t\t// Double-click prevention\n\t\t\tif (preventDoubleClick) {\n\t\t\t\tsetIsClicking(true);\n\t\t\t\tsetTimeout(() => setIsClicking(false), 300);\n\t\t\t}\n\n\t\t\t// Analytics tracking\n\t\t\tif (analytics?.event && process.env.NODE_ENV !== \"test\") {\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\tnew CustomEvent(\"uxp:analytics\", {\n\t\t\t\t\t\t\tdetail: { component: \"button\", ...analytics },\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Interactive feedback\n\t\t\ttriggerHaptics(hapticPref);\n\t\t\tplaySound(soundPref);\n\t\t\t\n\t\t\t// Only trigger ripple for pointer events with valid coordinates\n\t\t\tif (clickEffect === \"ripple\" && \"clientX\" in e && \"clientY\" in e) {\n\t\t\t\ttriggerRipple(e as MouseEvent<HTMLButtonElement>);\n\t\t\t}\n\n\t\t\tif (onAction) await onAction();\n\t\t};\n\n\t\tconst handleMouseDown = (e: MouseEvent<HTMLButtonElement>) => {\n\t\t\tonMouseDown?.(e);\n\t\t\tif (e.defaultPrevented) return;\n\t\t\tstartLongPress();\n\t\t};\n\n\t\tconst handleKeyDown = (e: KeyboardEvent<HTMLButtonElement>) => {\n\t\t\tonKeyDown?.(e);\n\t\t\tif (e.defaultPrevented) return;\n\t\t\t\n\t\t\t// Enter and Space should activate the button\n\t\t\tif (e.key === \"Enter\" || e.key === \" \") {\n\t\t\t\te.preventDefault(); // Prevent default scrolling for Space\n\t\t\t\tif (!effectiveDisabled && state !== \"loading\") {\n\t\t\t\t\thandleClick(e as any); // Trigger click handler for keyboard activation\n\t\t\t\t}\n\t\t\t\tif (longPress) startLongPress();\n\t\t\t}\n\t\t};\n\n\t\t/* ========== Content Generation ========== */\n\t\tconst label =\n\t\t\tstate === \"loading\"\n\t\t\t\t? loadingText\n\t\t\t\t: state === \"success\"\n\t\t\t\t\t? successText\n\t\t\t\t\t: state === \"error\"\n\t\t\t\t\t\t? errorText\n\t\t\t\t\t\t: children;\n\n\t\tconst LoadingVisual =\n\t\t\tstate === \"loading\" ? (\n\t\t\t\tloadingType === \"dots\" ? (\n\t\t\t\t\t<Dots aria-hidden className=\"-ml-1\" />\n\t\t\t\t) : (\n\t\t\t\t\t<Spinner aria-hidden className=\"-ml-1\" />\n\t\t\t\t)\n\t\t\t) : null;\n\n\t\t/* ========== AsChild Pattern Handling ========== */\n\t\tif (asChild) {\n\t\t\tconst child = Children.only(children) as ReactElement<any>;\n\t\t\t\n\t\t\treturn cloneElement(child, {\n\t\t\t\tclassName: cn(\n\t\t\t\t\tbuttonVariants({ variant, size, clickEffect, hoverEffect, wide }),\n\t\t\t\t\tdebug && \"outline outline-dashed outline-2 outline-fuchsia-500/40\",\n\t\t\t\t\tclassName,\n\t\t\t\t\tchild.props.className,\n\t\t\t\t),\n\t\t\t\t\"aria-busy\": state === \"loading\" || undefined,\n\t\t\t\t\"aria-live\": announceChanges ? \"polite\" : undefined,\n\t\t\t\t\"aria-disabled\":\n\t\t\t\t\t!forceNativeDisabled && effectiveDisabled ? true : undefined,\n\t\t\t\tdisabled:\n\t\t\t\t\tforceNativeDisabled && (disabled || state === \"disabled\")\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\"data-state\": state,\n\t\t\t\tstyle: { ...(child.props.style || {}), minWidth },\n\t\t\t\tonClick: (e: MouseEvent) => {\n\t\t\t\t\t// Check disabled/loading state BEFORE calling child's onClick\n\t\t\t\t\tif (effectiveDisabled || state === \"loading\") {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tchild.props?.onClick?.(e);\n\t\t\t\t\thandleClick(e as MouseEvent<HTMLButtonElement>);\n\t\t\t\t},\n\t\t\t\tonMouseDown: (e: MouseEvent) => {\n\t\t\t\t\tchild.props?.onMouseDown?.(e);\n\t\t\t\t\thandleMouseDown(e as MouseEvent<HTMLButtonElement>);\n\t\t\t\t},\n\t\t\t\tonMouseUp: (e: MouseEvent) => {\n\t\t\t\t\tchild.props?.onMouseUp?.(e);\n\t\t\t\t\tclearLongPress();\n\t\t\t\t},\n\t\t\t\tonMouseLeave: (e: MouseEvent) => {\n\t\t\t\t\tchild.props?.onMouseLeave?.(e);\n\t\t\t\t\tclearLongPress();\n\t\t\t\t},\n\t\t\t\tonKeyDown: (e: KeyboardEvent) => {\n\t\t\t\t\tchild.props?.onKeyDown?.(e);\n\t\t\t\t\thandleKeyDown(e as KeyboardEvent<HTMLButtonElement>);\n\t\t\t\t},\n\t\t\t\tonKeyUp: (e: KeyboardEvent) => {\n\t\t\t\t\tchild.props?.onKeyUp?.(e);\n\t\t\t\t\tclearLongPress();\n\t\t\t\t},\n\t\t\t\tref: (element: any) => {\n\t\t\t\t\t// Update btnRef for useImperativeHandle\n\t\t\t\t\tbtnRef.current = element;\n\t\t\t\t\t\n\t\t\t\t\t// Forward ref to both the internal ref and the external ref\n\t\t\t\t\tif (ref) {\n\t\t\t\t\t\tif (typeof ref === 'function') {\n\t\t\t\t\t\t\tref(element);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tref.current = element;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (child.props.ref) {\n\t\t\t\t\t\tif (typeof child.props.ref === 'function') {\n\t\t\t\t\t\t\tchild.props.ref(element);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchild.props.ref.current = element;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tchildren: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{RippleElement}\n\t\t\t\t\t\t{LoadingVisual}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName=\"sr-only\"\n\t\t\t\t\t\t\taria-live={announceChanges ? \"polite\" : undefined}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{state === \"loading\" ? loadingText : child.props.children}\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t} as any);\n\t\t}\n\n\t\t/* ========== Main Button Render ========== */\n\t\tconst Comp = asChild ? Slot : Motion.button;\n\n\t\treturn (\n\t\t\t<Comp\n\t\t\t\tref={btnRef}\n\t\t\t\ttype={asChild ? undefined : type}\n\t\t\t\tclassName={cn(\n\t\t\t\t\tbuttonVariants({\n\t\t\t\t\t\tvariant,\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tclickEffect,\n\t\t\t\t\t\thoverEffect,\n\t\t\t\t\t\twide,\n\t\t\t\t\t\trounded,\n\t\t\t\t\t\tshadow,\n\t\t\t\t\t}),\n\t\t\t\t\tdebug && \"outline outline-dashed outline-2 outline-fuchsia-500/40\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\taria-busy={state === \"loading\" || undefined}\n\t\t\t\taria-live={announceChanges ? \"polite\" : undefined}\n\t\t\t\taria-disabled={\n\t\t\t\t\t!forceNativeDisabled && effectiveDisabled ? true : undefined\n\t\t\t\t}\n\t\t\t\tdisabled={\n\t\t\t\t\tforceNativeDisabled && (disabled || state === \"disabled\")\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: undefined\n\t\t\t\t}\n\t\t\t\tdata-state={state}\n\t\t\t\tstyle={{\n\t\t\t\t\tminWidth,\n\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t// Only apply overflow hidden for effects that need it\n\t\t\t\t\t...(clickEffect === \"ripple\" ? { overflow: \"hidden\" } : {}),\n\t\t\t\t}}\n\t\t\t\tonClick={handleClick}\n\t\t\t\tonMouseDown={handleMouseDown}\n\t\t\t\tonMouseUp={clearLongPress}\n\t\t\t\tonMouseLeave={clearLongPress}\n\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\tonKeyUp={clearLongPress}\n\t\t\t\t{...getMotionProps(clickEffect, hoverEffect)}\n\t\t\t\t{...props}\n\t\t\t>\n\n\t\t\t\t{/* Pulse effect */}\n\t\t\t\t{isPulsing && clickEffect === \"pulse\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Motion.span\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 rounded-[inherit] pointer-events-none dark:hidden\"\n\t\t\t\t\t\t\tinitial={{ boxShadow: \"0 0 0 0 rgba(0, 0, 0, 0.3)\" }}\n\t\t\t\t\t\t\tanimate={{ boxShadow: \"0 0 0 15px rgba(0, 0, 0, 0)\" }}\n\t\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t\tduration: 1,\n\t\t\t\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Motion.span\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 rounded-[inherit] pointer-events-none hidden dark:block\"\n\t\t\t\t\t\t\tinitial={{ boxShadow: \"0 0 0 0 rgba(255, 255, 255, 0.3)\" }}\n\t\t\t\t\t\t\tanimate={{ boxShadow: \"0 0 0 15px rgba(255, 255, 255, 0)\" }}\n\t\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t\tduration: 1,\n\t\t\t\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\n\t\t\t\t{/* Ripple effect */}\n\t\t\t\t{RippleElement}\n\n\t\t\t\t{/* Button content */}\n\t\t\t\t{LoadingVisual}\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"sr-only\"\n\t\t\t\t\taria-live={announceChanges ? \"polite\" : undefined}\n\t\t\t\t/>\n\t\t\t\t{label}\n\t\t\t</Comp>\n\t\t);\n\t},\n);\n\nButton.displayName = \"Button\";\n",
    meta: {"tags":["button","motion","haptics","accessibility","interactive"]},
  },
  "button-aria-features": {
    name: "button-aria-features",
    description: "Button with accessibility features and ARIA attributes",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-aria-features.tsx",
        type: "registry:block",
        target: "components/blocks/button-aria-features.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-aria-features") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-aria-features\n * @title Accessible Button Features\n * @type registry:block\n * @description Button with accessibility features and ARIA attributes\n * @categories [\"buttons\", \"accessibility\", \"aria\"]\n * @tags [\"accessibility\", \"aria\", \"screen-reader\", \"inclusive\", \"a11y\"]\n * @dependencies [\"lucide-react\", \"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { Edit, Save, Share2, Trash2 } from \"lucide-react\";\nimport { useId } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonAriaFeatures() {\n\tconst helpTextId = useId();\n\n\treturn (\n\t\t<div className=\"space-y-4\">\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button aria-label=\"Save document\" type=\"button\">\n\t\t\t\t\t<Save className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t\t<Button aria-label=\"Delete item\" type=\"button\">\n\t\t\t\t\t<Trash2 className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t\t<Button aria-label=\"Edit content\" type=\"button\">\n\t\t\t\t\t<Edit className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t\t<Button aria-label=\"Share post\" type=\"button\">\n\t\t\t\t\t<Share2 className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button aria-disabled={true} type=\"button\">\n\t\t\t\t\tARIA Disabled\n\t\t\t\t</Button>\n\t\t\t\t<Button announceChanges state=\"loading\" type=\"button\">\n\t\t\t\t\tWith Screen Reader Announcements\n\t\t\t\t</Button>\n\t\t\t\t<Button aria-busy={true} type=\"button\">\n\t\t\t\t\tARIA Busy State\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\taria-describedby={helpTextId}\n\t\t\t\t\ttooltipWhenDisabled=\"Feature coming soon\"\n\t\t\t\t>\n\t\t\t\t\tWith Description\n\t\t\t\t</Button>\n\t\t\t\t<span id={helpTextId} className=\"sr-only\">\n\t\t\t\t\tThis button saves your current progress\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["accessibility","aria","screen-reader","inclusive","a11y"]},
  },
  "button-as-child": {
    name: "button-as-child",
    description: "Button component using the asChild pattern for custom elements",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-as-child.tsx",
        type: "registry:block",
        target: "components/blocks/button-as-child.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-as-child") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-as-child\n * @title Polymorphic Button (asChild)\n * @type registry:block\n * @description Button component using the asChild pattern for custom elements\n * @categories [\"buttons\", \"patterns\", \"composition\"]\n * @tags [\"asChild\", \"composition\", \"polymorphic\", \"links\", \"navigation\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { Button } from \"@/ui/button\";\n// import Link from \"next/link\"; // Uncomment when using Next.js Link example\n\nexport default function ButtonAsChild() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button asChild>\n\t\t\t\t<a href=\"#pricing\" className=\"no-underline\">\n\t\t\t\t\tView Pricing\n\t\t\t\t</a>\n\t\t\t</Button>\n\t\t\t<Button variant=\"outline\" asChild>\n\t\t\t\t{/* Example with Next.js Link (uncomment and add the import above) */}\n\t\t\t\t{/* <Link href=\"/docs\" className=\"no-underline\"> */}\n\t\t\t\t<a href=\"#docs\" className=\"no-underline\">\n\t\t\t\t\tDocumentation\n\t\t\t\t</a>\n\t\t\t\t{/* </Link> */}\n\t\t\t</Button>\n\t\t\t<Button variant=\"ghost\" asChild>\n\t\t\t\t<a href=\"#about\">About Us</a>\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["asChild","composition","polymorphic","links","navigation"]},
  },
  "button-confirmation": {
    name: "button-confirmation",
    description: "Button with confirmation patterns and destructive actions",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-confirmation.tsx",
        type: "registry:block",
        target: "components/blocks/button-confirmation.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-confirmation") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-confirmation\n * @title Confirmation & Destructive Actions\n * @type registry:block\n * @description Button with confirmation patterns and destructive actions\n * @categories [\"buttons\", \"confirmation\", \"destructive-actions\"]\n * @tags [\"confirmation\", \"destructive\", \"safety\", \"interactive\", \"haptics\", \"sound\"]\n * @dependencies [\"lucide-react\", \"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { AlertTriangle, Check, Trash2, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonConfirmation() {\n\tconst [deleteState, setDeleteState] = useState<\"idle\" | \"confirming\">(\"idle\");\n\tconst [archiveState, setArchiveState] = useState<\"idle\" | \"confirming\">(\n\t\t\"idle\",\n\t);\n\n\treturn (\n\t\t<div className=\"flex flex-col gap-4\">\n\t\t\t{/* Delete with confirmation */}\n\t\t\t<div className=\"flex items-center gap-2\" aria-live=\"polite\">\n\t\t\t\t{deleteState === \"idle\" ? (\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\tonClick={() => setDeleteState(\"confirming\")}\n\t\t\t\t\t\thaptics=\"medium\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Trash2 className=\"h-4 w-4\" />\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t<span className=\"text-sm font-medium\">Are you sure?</span>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t// Perform delete action\n\t\t\t\t\t\t\t\tsetDeleteState(\"idle\");\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\thaptics=\"heavy\"\n\t\t\t\t\t\t\tsound=\"click\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Check className=\"h-4 w-4\" />\n\t\t\t\t\t\t\tYes, delete\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => setDeleteState(\"idle\")}\n\t\t\t\t\t\t\thaptics=\"light\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* Archive with inline confirmation */}\n\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t{archiveState === \"idle\" ? (\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\tonClick={() => setArchiveState(\"confirming\")}\n\t\t\t\t\t\thaptics=\"light\"\n\t\t\t\t\t>\n\t\t\t\t\t\tArchive Item\n\t\t\t\t\t</Button>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"inline-flex rounded-lg border border-amber-200 bg-amber-50 p-1 dark:border-amber-900 dark:bg-amber-950\">\n\t\t\t\t\t\t<span className=\"flex items-center px-2 text-sm text-amber-800 dark:text-amber-200\">\n\t\t\t\t\t\t\t<AlertTriangle className=\"mr-1 h-3 w-3\" />\n\t\t\t\t\t\t\tConfirm archive?\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tvariant=\"warning\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t// Perform archive action\n\t\t\t\t\t\t\t\tsetArchiveState(\"idle\");\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\thaptics=\"medium\"\n\t\t\t\t\t\t\tclassName=\"ml-1\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tArchive\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => setArchiveState(\"idle\")}\n\t\t\t\t\t\t\thaptics=\"light\"\n\t\t\t\t\t\t\tclassName=\"ml-1\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* Long press confirmation */}\n\t\t\t<Button\n\t\t\t\ttype=\"button\"\n\t\t\t\tvariant=\"danger\"\n\t\t\t\tlongPress={{\n\t\t\t\t\tduration: 1000,\n\t\t\t\t\tonLongPress: () => {\n\t\t\t\t\t\tconsole.log(\"Item deleted via long press\");\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\thaptics=\"heavy\"\n\t\t\t>\n\t\t\t\t<Trash2 className=\"h-4 w-4\" />\n\t\t\t\tHold to Delete\n\t\t\t</Button>\n\n\t\t\t{/* Two-step action */}\n\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tstate=\"idle\"\n\t\t\t\t\tonAction={async () => {\n\t\t\t\t\t\t// Simulate async action\n\t\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\t\t\t\t\t}}\n\t\t\t\t\tloadingText=\"Publishing...\"\n\t\t\t\t\tsuccessText=\"Published!\"\n\t\t\t\t\thaptics=\"medium\"\n\t\t\t\t\tsound=\"click\"\n\t\t\t\t>\n\t\t\t\t\tPublish Changes\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t<p className=\"text-sm text-muted-foreground\">\n\t\t\t\tNote: For modal confirmations, combine with Dialog component\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["confirmation","destructive","safety","interactive","haptics","sound"]},
  },
  "button-counter-inline": {
    name: "button-counter-inline",
    description: "Button with inline counters and interactive counts",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-counter-inline.tsx",
        type: "registry:block",
        target: "components/blocks/button-counter-inline.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-counter-inline") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-counter-inline\n * @title Button with Inline Counters\n * @type registry:block\n * @description Button with inline counters and interactive counts\n * @categories [\"buttons\", \"counters\", \"interactive\"]\n * @tags [\"counters\", \"inline\", \"interactive\", \"social\", \"engagement\", \"lucide\", \"haptics\"]\n * @dependencies [\"lucide-react\", \"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { Eye, Heart, MessageSquare, Star, ThumbsUp, Users } from \"lucide-react\";\nimport { useId, useState } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonCounterInline() {\n\tconst [starred, setStarred] = useState(false);\n\tconst [starCount, setStarCount] = useState(234);\n\tconst [liked, setLiked] = useState(false);\n\tconst [likeCount, setLikeCount] = useState(42);\n\tconst commentsCountId = useId();\n\tconst followerCountId = useId();\n\n\tconst handleLike = () => {\n\t\tsetLiked(!liked);\n\t\tsetLikeCount(liked ? likeCount - 1 : likeCount + 1);\n\t};\n\n\treturn (\n\t\t<div className=\"flex flex-col gap-4\">\n\t\t\t{/* Basic counters */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclassName=\"tabular-nums\"\n\t\t\t\t\taria-pressed={starred}\n\t\t\t\t\taria-label={`${starred ? \"Unstar\" : \"Star\"} this repository, ${starCount.toLocaleString()} stars`}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetStarred((prev) => {\n\t\t\t\t\t\t\tconst next = !prev;\n\t\t\t\t\t\t\tsetStarCount((c) => Math.max(0, c + (next ? 1 : -1)));\n\t\t\t\t\t\t\treturn next;\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Star className=\"h-4 w-4\" fill={starred ? \"currentColor\" : \"none\"} />\n\t\t\t\t\t<span aria-hidden=\"true\">{starCount.toLocaleString()}</span>\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"ml-2 rounded bg-primary/10 px-2 py-0.5 text-xs font-medium\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{/* duplicate visual badge */}\n\t\t\t\t\t\t{starCount.toLocaleString()}\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"ghost\" className=\"tabular-nums\" type=\"button\">\n\t\t\t\t\t<ThumbsUp className=\"h-4 w-4\" />\n\t\t\t\t\tLike\n\t\t\t\t\t<span className=\"sr-only\">, 42 likes</span>\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"ml-2 rounded bg-primary/10 px-2 py-0.5 text-xs font-medium\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t42\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"soft\"\n\t\t\t\t\tclassName=\"tabular-nums\"\n\t\t\t\t\taria-describedby={commentsCountId}\n\t\t\t\t>\n\t\t\t\t\t<MessageSquare className=\"h-4 w-4\" />\n\t\t\t\t\tComments\n\t\t\t\t\t<span\n\t\t\t\t\t\tid={commentsCountId}\n\t\t\t\t\t\tclassName=\"ml-2 rounded bg-primary/10 px-2 py-0.5 text-xs font-medium\"\n\t\t\t\t\t>\n\t\t\t\t\t\t18\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Interactive counters */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t{/* Like with animation */}\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant={liked ? \"danger\" : \"ghost\"}\n\t\t\t\t\tonClick={handleLike}\n\t\t\t\t\thaptics={liked ? \"medium\" : \"light\"}\n\t\t\t\t\tsound=\"subtle\"\n\t\t\t\t\tclickEffect={liked ? \"spring\" : \"scale\"}\n\t\t\t\t\tclassName=\"tabular-nums\"\n\t\t\t\t\taria-label={`${liked ? \"Unlike\" : \"Like\"} this post, ${likeCount} likes`}\n\t\t\t\t>\n\t\t\t\t\t<Heart className={liked ? \"fill-current h-4 w-4\" : \"h-4 w-4\"} />\n\t\t\t\t\t<span aria-hidden=\"true\">{likeCount}</span>\n\t\t\t\t</Button>\n\n\t\t\t\t{/* Comment count */}\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\thaptics=\"light\"\n\t\t\t\t\tclassName=\"tabular-nums\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\taria-label=\"View 128 comments\"\n\t\t\t\t>\n\t\t\t\t\t<MessageSquare className=\"h-4 w-4\" />\n\t\t\t\t\t<span aria-hidden=\"true\">128</span>\n\t\t\t\t</Button>\n\n\t\t\t\t{/* View count (read-only) */}\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\tdisabled\n\t\t\t\t\tclassName=\"tabular-nums\"\n\t\t\t\t\taria-label=\"1,200 views\"\n\t\t\t\t>\n\t\t\t\t\t<Eye className=\"h-4 w-4\" />\n\t\t\t\t\t<span aria-hidden=\"true\">1.2k</span>\n\t\t\t\t</Button>\n\n\t\t\t\t{/* Followers */}\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"soft\"\n\t\t\t\t\thaptics=\"light\"\n\t\t\t\t\tclassName=\"tabular-nums\"\n\t\t\t\t\taria-describedby={followerCountId}\n\t\t\t\t>\n\t\t\t\t\t<Users className=\"h-4 w-4\" />\n\t\t\t\t\tFollow\n\t\t\t\t\t<span id={followerCountId} className=\"ml-2 text-xs opacity-60\">\n\t\t\t\t\t\t{Number(892).toLocaleString()} followers\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["counters","inline","interactive","social","engagement","lucide","haptics"]},
  },
  "button-default": {
    name: "button-default",
    description: "Basic button with default styling and behavior",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-default.tsx",
        type: "registry:block",
        target: "components/blocks/button-default.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-default") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-default\n * @title Default Button\n * @type registry:block\n * @description Basic button with default styling and behavior\n * @categories [\"buttons\", \"basic\", \"foundation\"]\n * @tags [\"default\", \"basic\", \"foundation\", \"simple\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonDefault() {\n\treturn <Button type=\"button\">Default Button</Button>;\n}\n",
    meta: {"tags":["default","basic","foundation","simple"]},
  },
  "button-destructive": {
    name: "button-destructive",
    description: "Destructive button variant for dangerous actions",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-destructive.tsx",
        type: "registry:block",
        target: "components/blocks/button-destructive.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-destructive") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-destructive\n * @title Destructive Button\n * @type registry:block\n * @description Destructive button variant for dangerous actions\n * @categories [\"buttons\", \"destructive-actions\", \"danger\"]\n * @tags [\"destructive\", \"danger\", \"delete\", \"warning\", \"red\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonDestructive() {\n\treturn <Button variant=\"danger\" type=\"button\">Delete</Button>;\n}\n",
    meta: {"tags":["destructive","danger","delete","warning","red"]},
  },
  "button-disabled": {
    name: "button-disabled",
    description: "Button in disabled states with different approaches",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-disabled.tsx",
        type: "registry:block",
        target: "components/blocks/button-disabled.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-disabled") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-disabled\n * @title Disabled Button States\n * @type registry:block\n * @description Button in disabled states with different approaches\n * @categories [\"buttons\", \"states\", \"accessibility\"]\n * @tags [\"disabled\", \"states\", \"accessibility\", \"aria\", \"interactive\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonDisabled() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button disabled type=\"button\">Default (ARIA Disabled)</Button>\n\t\t\t<Button disabled forceNativeDisabled type=\"button\">\n\t\t\t\tForce Native Disabled\n\t\t\t</Button>\n\t\t\t<Button state=\"disabled\" type=\"button\">State Disabled</Button>\n\t\t\t<Button variant=\"outline\" disabled type=\"button\">\n\t\t\t\tDisabled Outline\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["disabled","states","accessibility","aria","interactive"]},
  },
  "button-double-icon": {
    name: "button-double-icon",
    description: "Button with icons on both left and right sides",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-double-icon.tsx",
        type: "registry:block",
        target: "components/blocks/button-double-icon.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-double-icon") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-double-icon\n * @title Double Icon Button\n * @type registry:block\n * @description Button with icons on both left and right sides\n * @categories [\"buttons\", \"icons\", \"layout\"]\n * @tags [\"double-icon\", \"icons\", \"left-right\", \"layout\", \"lucide\", \"complex\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport {\n\tArrowRight,\n\tChevronRight,\n\tDownload,\n\tExternalLink,\n\tLock,\n\tMail,\n} from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonDoubleIcon() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button>\n\t\t\t\t<Mail aria-hidden=\"true\" className=\"h-4 w-4\" />\n\t\t\t\tSend Email\n\t\t\t\t<ArrowRight aria-hidden=\"true\" className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button variant=\"outline\">\n\t\t\t\t<Download aria-hidden=\"true\" className=\"h-4 w-4\" />\n\t\t\t\tExport PDF\n\t\t\t\t<ExternalLink aria-hidden=\"true\" className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button variant=\"soft\">\n\t\t\t\t<Lock aria-hidden=\"true\" className=\"h-4 w-4\" />\n\t\t\t\tView Details\n\t\t\t\t<ChevronRight aria-hidden=\"true\" className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["double-icon","icons","left-right","layout","lucide","complex"]},
  },
  "button-full-width": {
    name: "button-full-width",
    description: "Button with full width styling for prominent actions",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-full-width.tsx",
        type: "registry:block",
        target: "components/blocks/button-full-width.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-full-width") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-full-width\n * @title Full-Width Buttons\n * @type registry:block\n * @description Button with full width styling for prominent actions\n * @categories [\"buttons\", \"layout\", \"full-width\"]\n * @tags [\"full-width\", \"wide\", \"layout\", \"prominent\", \"mobile\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonFullWidth() {\n\treturn (\n\t\t<div className=\"w-full max-w-md space-y-4\">\n\t\t\t<Button wide type=\"button\">Full Width with Wide Prop</Button>\n\t\t\t<Button wide variant=\"outline\" type=\"button\">\n\t\t\t\tFull Width Outline\n\t\t\t</Button>\n\t\t\t<Button wide size=\"lg\" type=\"button\">\n\t\t\t\tFull Width Large\n\t\t\t</Button>\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<Button wide type=\"button\">Primary Action</Button>\n\t\t\t\t<Button wide variant=\"ghost\" type=\"button\">\n\t\t\t\t\tSecondary Action\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["full-width","wide","layout","prominent","mobile"]},
  },
  "button-ghost": {
    name: "button-ghost",
    description: "Ghost button variant with subtle styling",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-ghost.tsx",
        type: "registry:block",
        target: "components/blocks/button-ghost.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-ghost") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-ghost\n * @title Ghost Button\n * @type registry:block\n * @description Ghost button variant with subtle styling\n * @categories [\"buttons\", \"variants\", \"subtle\"]\n * @tags [\"ghost\", \"variant\", \"subtle\", \"minimal\", \"transparent\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonGhost() {\n\treturn (\n\t\t<Button type=\"button\" variant=\"ghost\">\n\t\t\tGhost\n\t\t</Button>\n\t);\n}\n",
    meta: {"tags":["ghost","variant","subtle","minimal","transparent"]},
  },
  "button-groups": {
    name: "button-groups",
    description: "Button components arranged in connected groups",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-groups.tsx",
        type: "registry:block",
        target: "components/blocks/button-groups.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-groups") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-groups\n * @title Button Groups & Toolbars\n * @type registry:block\n * @description Button components arranged in connected groups\n * @categories [\"buttons\", \"groups\", \"layout\"]\n * @tags [\"groups\", \"connected\", \"layout\", \"segmented\", \"toolbar\", \"lucide\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport { Edit, Share2, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonGroups() {\n\treturn (\n\t\t<div className=\"space-y-6\">\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<h4 className=\"text-sm font-medium\">Horizontal Group</h4>\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<Button className=\"rounded-r-none border-r-0\" type=\"button\">Left</Button>\n\t\t\t\t\t<Button variant=\"outline\" className=\"rounded-none border-r-0\" type=\"button\">\n\t\t\t\t\t\tCenter\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"outline\" className=\"rounded-l-none\" type=\"button\">\n\t\t\t\t\t\tRight\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<h4 className=\"text-sm font-medium\">Attached Group</h4>\n\t\t\t\t<div className=\"inline-flex rounded-md shadow-sm\" role=\"group\">\n\t\t\t\t\t<Button variant=\"outline\" className=\"rounded-r-none border-r-0\" type=\"button\">\n\t\t\t\t\t\tYears\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"outline\" className=\"rounded-none border-r-0\" type=\"button\">\n\t\t\t\t\t\tMonths\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"outline\" className=\"rounded-l-none\" type=\"button\">\n\t\t\t\t\t\tDays\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<h4 className=\"text-sm font-medium\">Icon Button Group</h4>\n\t\t\t\t<div className=\"inline-flex rounded-md shadow-sm\" role=\"group\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\taria-label=\"Edit\"\n\t\t\t\t\t\tclassName=\"rounded-r-none border-r-0\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Edit className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\taria-label=\"Delete\"\n\t\t\t\t\t\tclassName=\"rounded-none border-r-0\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Trash2 className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\taria-label=\"Share\"\n\t\t\t\t\t\tclassName=\"rounded-l-none\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Share2 className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["groups","connected","layout","segmented","toolbar","lucide"]},
  },
  "button-icon-left": {
    name: "button-icon-left",
    description: "Button with icons positioned on the left side",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-icon-left.tsx",
        type: "registry:block",
        target: "components/blocks/button-icon-left.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-icon-left") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-icon-left\n * @title Button with Left Icons\n * @type registry:block\n * @description Button with icons positioned on the left side\n * @categories [\"buttons\", \"icons\", \"layout\"]\n * @tags [\"icons\", \"left\", \"layout\", \"lucide\", \"positioning\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport { Mail, Save, Upload } from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonIconLeft() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button type=\"button\">\n\t\t\t\t<Mail className=\"h-4 w-4\" />\n\t\t\t\tSend Email\n\t\t\t</Button>\n\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t<Save className=\"h-4 w-4\" />\n\t\t\t\tSave Document\n\t\t\t</Button>\n\t\t\t<Button variant=\"soft\" type=\"button\">\n\t\t\t\t<Upload className=\"h-4 w-4\" />\n\t\t\t\tUpload File\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["icons","left","layout","lucide","positioning"]},
  },
  "button-icon-only": {
    name: "button-icon-only",
    description: "Button with only icons, no text labels",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-icon-only.tsx",
        type: "registry:block",
        target: "components/blocks/button-icon-only.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-icon-only") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-icon-only\n * @title Icon-Only Buttons\n * @type registry:block\n * @description Button with only icons, no text labels\n * @categories [\"buttons\", \"icons\", \"compact\"]\n * @tags [\"icons\", \"only\", \"compact\", \"minimal\", \"aria-label\", \"accessibility\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport { Edit, Heart, Save, Settings, Share2, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonIconOnly() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button aria-label=\"Save\" type=\"button\">\n\t\t\t\t<Save className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button aria-label=\"Delete\" type=\"button\">\n\t\t\t\t<Trash2 className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button aria-label=\"Edit\" type=\"button\">\n\t\t\t\t<Edit className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button aria-label=\"Settings\" variant=\"outline\" type=\"button\">\n\t\t\t\t<Settings className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button aria-label=\"Share\" variant=\"ghost\" type=\"button\">\n\t\t\t\t<Share2 className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button aria-label=\"Favorite\" variant=\"soft\" type=\"button\">\n\t\t\t\t<Heart className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["icons","only","compact","minimal","aria-label","accessibility"]},
  },
  "button-icon-right": {
    name: "button-icon-right",
    description: "Button with icons positioned on the right side",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-icon-right.tsx",
        type: "registry:block",
        target: "components/blocks/button-icon-right.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-icon-right") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-icon-right\n * @title Button with Right Icons\n * @type registry:block\n * @description Button with icons positioned on the right side\n * @categories [\"buttons\", \"icons\", \"layout\"]\n * @tags [\"icons\", \"right\", \"layout\", \"lucide\", \"positioning\", \"navigation\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport { ArrowRight, ChevronRight, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonIconRight() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button type=\"button\">\n\t\t\t\tContinue\n\t\t\t\t<ChevronRight className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\tNext Step\n\t\t\t\t<ArrowRight className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t\t<Button variant=\"link\" type=\"button\">\n\t\t\t\tLearn More\n\t\t\t\t<ExternalLink className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["icons","right","layout","lucide","positioning","navigation"]},
  },
  "button-link": {
    name: "button-link",
    description: "Link-styled button variant. For navigation, prefer using asChild with an <a> element to preserve link semantics and accessibility.",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-link.tsx",
        type: "registry:block",
        target: "components/blocks/button-link.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-link") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-link\n * @title Link Button\n * @type registry:block\n * @description Link-styled button variant. For navigation, prefer using asChild with an <a> element to preserve link semantics and accessibility.\n * @categories [\"buttons\", \"variants\", \"navigation\"]\n * @tags [\"link\", \"variant\", \"navigation\", \"text\", \"minimal\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonLink() {\n\treturn (\n\t\t<Button variant=\"link\" asChild>\n\t\t\t<a href=\"#\">Link</a>\n\t\t</Button>\n\t);\n}\n",
    meta: {"tags":["link","variant","navigation","text","minimal"]},
  },
  "button-loading-states": {
    name: "button-loading-states",
    description: "Button with various loading states and animations",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-loading-states.tsx",
        type: "registry:block",
        target: "components/blocks/button-loading-states.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-loading-states") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-loading-states\n * @title Loading States Button\n * @type registry:block\n * @description Button with various loading states and animations\n * @categories [\"buttons\", \"loading\", \"states\"]\n * @tags [\"loading\", \"animation\", \"states\", \"interactive\", \"feedback\"]\n * @dependencies [\"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonLoadingStates() {\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n\tconst handleClick = () => {\n\t\t// Guard on timeoutRef to prevent re-entry within the same tick\n\t\tif (timeoutRef.current !== null) return;\n\n\t\t// Set timeoutRef immediately when accepting the click\n\t\ttimeoutRef.current = setTimeout(() => {\n\t\t\tsetIsLoading(false);\n\t\t\ttimeoutRef.current = null;\n\t\t}, 2000);\n\n\t\tsetIsLoading(true);\n\t};\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tif (timeoutRef.current) clearTimeout(timeoutRef.current);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<div className=\"space-y-4\">\n\t\t\t<div className=\"flex flex-wrap items-center gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tstate={isLoading ? \"loading\" : \"idle\"}\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\tloadingType=\"spinner\"\n\t\t\t\t>\n\t\t\t\t\tSave Changes\n\t\t\t\t</Button>\n\t\t\t\t<Button state=\"loading\" loadingType=\"spinner\" type=\"button\">\n\t\t\t\t\tLoading Spinner\n\t\t\t\t</Button>\n\t\t\t\t<Button state=\"loading\" loadingType=\"dots\" type=\"button\">\n\t\t\t\t\tLoading Dots\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className=\"flex flex-wrap items-center gap-2\">\n\t\t\t\t<Button state=\"loading\" loadingText=\"Processing...\" type=\"button\">\n\t\t\t\t\tCustom Loading Text\n\t\t\t\t</Button>\n\t\t\t\t<Button state=\"success\" successText=\"Saved!\" type=\"button\">\n\t\t\t\t\tSuccess State\n\t\t\t\t</Button>\n\t\t\t\t<Button state=\"error\" errorText=\"Failed\" type=\"button\">\n\t\t\t\t\tError State\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["loading","animation","states","interactive","feedback"]},
  },
  "button-long-press": {
    name: "button-long-press",
    description: "Button with long press gesture support",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-long-press.tsx",
        type: "registry:block",
        target: "components/blocks/button-long-press.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-long-press") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-long-press\n * @title Long Press Buttons\n * @type registry:block\n * @description Button with long press gesture support\n * @categories [\"buttons\", \"gestures\", \"mobile\"]\n * @tags [\"long-press\", \"gestures\", \"mobile\", \"touch\", \"interactive\", \"duration\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonLongPress() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button\n\t\t\t\ttype=\"button\"\n\t\t\t\tlongPress={{\n\t\t\t\t\tduration: 500,\n\t\t\t\t\tonLongPress: () => alert(\"Long pressed for 500ms!\"),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tHold 0.5s\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\ttype=\"button\"\n\t\t\t\tlongPress={{\n\t\t\t\t\tduration: 1000,\n\t\t\t\t\tonLongPress: () => alert(\"Long pressed for 1 second!\"),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tHold 1s\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\ttype=\"button\"\n\t\t\t\tlongPress={{\n\t\t\t\t\tduration: 2000,\n\t\t\t\t\tonLongPress: () => alert(\"Long pressed for 2 seconds!\"),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tHold 2s\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["long-press","gestures","mobile","touch","interactive","duration"]},
  },
  "button-motion-effects": {
    name: "button-motion-effects",
    description: "Button with various motion effects and animations",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-motion-effects.tsx",
        type: "registry:block",
        target: "components/blocks/button-motion-effects.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-motion-effects") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-motion-effects\n * @title Motion Effects Button\n * @type registry:block\n * @description Button with various motion effects and animations\n * @categories [\"buttons\", \"motion\", \"animation\"]\n * @tags [\"motion\", \"animation\", \"effects\", \"interactive\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonMotionEffects() {\n\treturn (\n\t\t<div className=\"flex flex-col gap-4\">\n\t\t\t{/* Click Effects */}\n\t\t\t<div>\n\t\t\t\t<h3 className=\"text-sm font-medium mb-2\">Click Effects</h3>\n\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t<Button clickEffect=\"none\" type=\"button\">No Effect</Button>\n\t\t\t\t\t<Button clickEffect=\"scale\" type=\"button\">Scale</Button>\n\t\t\t\t\t<Button clickEffect=\"ripple\" type=\"button\">Ripple</Button>\n\t\t\t\t\t<Button clickEffect=\"pulse\" type=\"button\">Pulse</Button>\n\t\t\t\t\t<Button clickEffect=\"spring\" type=\"button\">Spring</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* Hover Effects */}\n\t\t\t<div>\n\t\t\t\t<h3 className=\"text-sm font-medium mb-2\">Hover Effects</h3>\n\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t<Button hoverEffect=\"none\" type=\"button\">No Effect</Button>\n\t\t\t\t\t<Button hoverEffect=\"glow\" type=\"button\">Glow</Button>\n\t\t\t\t\t<Button hoverEffect=\"lift\" type=\"button\">Lift</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["motion","animation","effects","interactive"]},
  },
  "button-notification-badge": {
    name: "button-notification-badge",
    description: "Button with notification badges and status indicators",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-notification-badge.tsx",
        type: "registry:block",
        target: "components/blocks/button-notification-badge.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-notification-badge") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-notification-badge\n * @title Notification Badge Buttons\n * @type registry:block\n * @description Button with notification badges and status indicators\n * @categories [\"buttons\", \"notifications\", \"badges\"]\n * @tags [\"notifications\", \"badges\", \"indicators\", \"status\", \"lucide\", \"haptics\", \"pulsing\"]\n * @dependencies [\"lucide-react\", \"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { AlertTriangle, Bell } from \"lucide-react\";\nimport { useId, useState } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonNotificationBadge() {\n\tconst [notifications, setNotifications] = useState(5);\n\tconst updatesNewId = useId();\n\n\treturn (\n\t\t<div className=\"flex flex-col gap-4\">\n\t\t\t{/* Basic badges */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button aria-label=\"Messages, 12 new\" type=\"button\">\n\t\t\t\t\tMessages\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"ml-2 inline-flex h-5 select-none items-center justify-center rounded-full bg-primary-foreground/20 px-2 py-0.5 text-xs font-medium text-primary-foreground\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t12\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t\tNotifications\n\t\t\t\t\t<span className=\"sr-only\">, 3 unread</span>\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"ml-2 inline-flex h-5 select-none items-center justify-center rounded-full bg-amber-500/20 px-2 py-0.5 text-xs font-medium text-amber-600 dark:text-amber-400\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t3\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"soft\" aria-describedby={updatesNewId} type=\"button\">\n\t\t\t\t\tUpdates\n\t\t\t\t\t<span\n\t\t\t\t\t\tid={updatesNewId}\n\t\t\t\t\t\tclassName=\"ml-2 inline-flex h-5 select-none items-center justify-center rounded-full bg-green-500/20 px-2 py-0.5 text-xs font-medium text-green-600 dark:text-green-400\"\n\t\t\t\t\t>\n\t\t\t\t\t\tNew\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Notification badges */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t{/* Icon with badge */}\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\taria-label={`Notifications${notifications > 0 ? ` (${notifications})` : \"\"}`}\n\t\t\t\t\tonClick={() => setNotifications(0)}\n\t\t\t\t\thaptics=\"light\"\n\t\t\t\t\tsound=\"subtle\"\n\t\t\t\t\tclassName=\"relative h-9 w-9 p-0\"\n\t\t\t\t>\n\t\t\t\t\t<Bell className=\"h-4 w-4\" aria-hidden=\"true\" />\n\t\t\t\t\t{notifications > 0 && (\n\t\t\t\t\t\t<span className=\"absolute -top-2 left-full -translate-x-1/2 flex h-5 min-w-[20px] items-center justify-center rounded-full bg-red-500 px-1 text-[10px] font-bold text-white\" aria-hidden=\"true\">\n\t\t\t\t\t\t\t{notifications > 99 ? \"99+\" : notifications}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</Button>\n\n\t\t\t\t{/* Pulsing notification */}\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"soft\"\n\t\t\t\t\taria-label=\"Updates available\"\n\t\t\t\t\tclassName=\"relative\"\n\t\t\t\t>\n\t\t\t\t\tUpdates\n\t\t\t\t\t<span className=\"absolute -top-0.5 -right-0.5 flex h-3 w-3\">\n\t\t\t\t\t\t<span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-emerald-400 opacity-75\"></span>\n\t\t\t\t\t\t<span className=\"relative inline-flex rounded-full h-3 w-3 bg-emerald-500\"></span>\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\n\t\t\t\t{/* Warning badge */}\n\t\t\t\t<Button variant=\"warning\" haptics=\"medium\" type=\"button\">\n\t\t\t\t\t<AlertTriangle className=\"h-4 w-4\" />\n\t\t\t\t\tAction Required\n\t\t\t\t\t<span className=\"ml-2 inline-flex h-5 items-center justify-center rounded-full bg-red-500 px-2 text-[10px] font-bold text-white\">\n\t\t\t\t\t\t!\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["notifications","badges","indicators","status","lucide","haptics","pulsing"]},
  },
  "button-outline": {
    name: "button-outline",
    description: "Outline button variant with border styling",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-outline.tsx",
        type: "registry:block",
        target: "components/blocks/button-outline.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-outline") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-outline\n * @title Outline Button\n * @type registry:block\n * @description Outline button variant with border styling\n * @categories [\"buttons\", \"variants\", \"outline\"]\n * @tags [\"outline\", \"variant\", \"border\", \"secondary\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonOutline() {\n\treturn (\n\t\t<Button type=\"button\" variant=\"outline\">\n\t\t\tOutline\n\t\t</Button>\n\t);\n}\n",
    meta: {"tags":["outline","variant","border","secondary"]},
  },
  "button-payment": {
    name: "button-payment",
    description: "Payment buttons with brand colors and checkout flows",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-payment.tsx",
        type: "registry:block",
        target: "components/blocks/button-payment.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-payment") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-payment\n * @title Payment & Checkout Buttons\n * @type registry:block\n * @description Payment buttons with brand colors and checkout flows\n * @categories [\"buttons\", \"payment\", \"e-commerce\"]\n * @tags [\"payment\", \"e-commerce\", \"checkout\", \"brands\", \"stripe\", \"paypal\", \"apple-pay\", \"lucide\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport { Clock, CreditCard, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonPayment() {\n\treturn (\n\t\t<div className=\"flex flex-col gap-4\">\n\t\t\t{/* Primary payment methods */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"md\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-[#5469d4] hover:bg-[#4456c7] text-white dark:bg-[#5469d4] dark:hover:bg-[#4456c7] transition-all hover:shadow-lg hover:shadow-[#5469d4]/20\"\n\t\t\t\t>\n\t\t\t\t\t<CreditCard className=\"h-5 w-5\" />\n\t\t\t\t\tPay with Card\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"md\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-[#FFC439] hover:bg-[#f7b500] text-black dark:bg-[#FFC439] dark:hover:bg-[#f7b500] dark:text-black transition-all hover:shadow-lg hover:shadow-[#FFC439]/20\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclassName=\"w-4 h-4\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\t\tdata-prefix=\"fab\"\n\t\t\t\t\t\tdata-icon=\"paypal\"\n\t\t\t\t\t\trole=\"img\"\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tviewBox=\"0 0 384 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\td=\"M111.4 295.9c-3.5 19.2-17.4 108.7-21.5 134-.3 1.8-1 2.5-3 2.5H12.3c-7.6 0-13.1-6.6-12.1-13.9L58.8 46.6c1.5-9.6 10.1-16.9 20-16.9 152.3 0 165.1-3.7 204 11.4 60.1 23.3 65.6 79.5 44 140.3-21.5 62.6-72.5 89.5-140.1 90.3-43.4 .7-69.5-7-75.3 24.2zM357.1 152c-1.8-1.3-2.5-1.8-3 1.3-2 11.4-5.1 22.5-8.8 33.6-39.9 113.8-150.5 103.9-204.5 103.9-6.1 0-10.1 3.3-10.9 9.4-22.6 140.4-27.1 169.7-27.1 169.7-1 7.1 3.5 12.9 10.6 12.9h63.5c8.6 0 15.7-6.3 17.4-14.9 .7-5.4-1.1 6.1 14.4-91.3 4.6-22 14.3-19.7 29.3-19.7 71 0 126.4-28.8 142.9-112.3 6.5-34.8 4.6-71.4-23.8-92.6z\"\n\t\t\t\t\t\t></path>\n\t\t\t\t\t</svg>\n\t\t\t\t\tPayPal\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"md\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-gray-900 hover:bg-black text-white dark:bg-gray-100 dark:hover:bg-white dark:text-black transition-all hover:shadow-lg hover:shadow-black/20 dark:hover:shadow-white/20\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclassName=\"w-5 h-5\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t\tfocusable=\"false\"\n\t\t\t\t\t\tdata-prefix=\"fab\"\n\t\t\t\t\t\tdata-icon=\"apple\"\n\t\t\t\t\t\trole=\"img\"\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\tviewBox=\"0 0 384 512\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\td=\"M318.7 268.7c-.2-36.7 16.4-64.4 50-84.8-18.8-26.9-47.2-41.7-84.7-44.6-35.5-2.8-74.3 20.7-88.5 20.7-15 0-49.4-19.7-76.4-19.7C63.3 141.2 4 184.8 4 273.5q0 39.3 14.4 81.2c12.8 36.7 59 126.7 107.2 125.2 25.2-.6 43-17.9 75.8-17.9 31.8 0 48.3 17.9 76.4 17.9 48.6-.7 90.4-82.5 102.6-119.3-65.2-30.7-61.7-90-61.7-91.9zm-56.6-164.2c27.3-32.4 24.8-61.9 24-72.5-24.1 1.4-52 16.4-67.9 34.9-17.5 19.8-27.8 44.3-25.6 71.9 26.1 2 49.9-11.4 69.5-34.3z\"\n\t\t\t\t\t\t></path>\n\t\t\t\t\t</svg>\n\t\t\t\t\tApple Pay\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Checkout button */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"success\"\n\t\t\t\t\tsize=\"md\"\n\t\t\t\t\twide\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"font-semibold transition-all hover:shadow-lg hover:shadow-emerald-500/20\"\n\t\t\t\t>\n\t\t\t\t\t<ShoppingCart className=\"h-5 w-5\" />\n\t\t\t\t\tComplete Purchase - $99.00\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Modern alternative */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tsize=\"md\"\n\t\t\t\t\twide\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"border-orange-500 text-orange-600 hover:bg-orange-500 hover:text-white font-semibold transition-all hover:shadow-lg hover:shadow-orange-500/20\"\n\t\t\t\t>\n\t\t\t\t\t<Clock className=\"h-5 w-5\" />\n\t\t\t\t\tBuy Now, Pay Later\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["payment","e-commerce","checkout","brands","stripe","paypal","apple-pay","lucide"]},
  },
  "button-preview": {
    name: "button-preview",
    description: "Comprehensive button showcase with all features and variants",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-preview.tsx",
        type: "registry:block",
        target: "components/blocks/button-preview.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-preview") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-preview\n * @title Button Features Showcase\n * @type registry:block\n * @description Comprehensive button showcase with all features and variants\n * @categories [\"buttons\", \"showcase\", \"demo\"]\n * @tags [\"showcase\", \"demo\", \"comprehensive\", \"features\", \"variants\", \"interactive\", \"lucide\"]\n * @dependencies [\"lucide-react\", \"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { ArrowRight, Mail, Settings } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonPreview() {\n\tconst [loadingState, setLoadingState] = useState<\n\t\t\"idle\" | \"loading\" | \"success\" | \"error\"\n\t>(\"idle\");\n\n\tconst isMounted = useRef(true);\n\tconst actionId = useRef(0);\n\tconst resetTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tisMounted.current = false;\n\t\t\t// Clear any pending reset timer on unmount\n\t\t\tif (resetTimerRef.current !== null) {\n\t\t\t\tclearTimeout(resetTimerRef.current);\n\t\t\t\tresetTimerRef.current = null;\n\t\t\t}\n\t\t};\n\t}, []);\n\n\tconst handleAsyncAction = async () => {\n\t\t// Block re-entry while loading\n\t\tif (loadingState === \"loading\") return;\n\n\t\t// Increment action ID and capture current ID\n\t\tconst id = ++actionId.current;\n\n\t\t// Set loading state with mount check\n\t\tif (isMounted.current && id === actionId.current) {\n\t\t\tsetLoadingState(\"loading\");\n\t\t}\n\n\t\t// Simulate async operation\n\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\n\t\t// Check if still mounted and this is the current action\n\t\tif (!isMounted.current || id !== actionId.current) return;\n\n\t\t// Deterministic outcome for testing (can be overridden with prop)\n\t\tconst shouldSucceed = Math.random() > 0.5;\n\n\t\t// Set result state with mount check\n\t\tif (isMounted.current && id === actionId.current) {\n\t\t\tsetLoadingState(shouldSucceed ? \"success\" : \"error\");\n\t\t}\n\n\t\t// Clear any existing reset timer before starting a new one\n\t\tif (resetTimerRef.current !== null) {\n\t\t\tclearTimeout(resetTimerRef.current);\n\t\t\tresetTimerRef.current = null;\n\t\t}\n\n\t\t// Reset to idle after delay with mount check\n\t\tresetTimerRef.current = setTimeout(() => {\n\t\t\tif (isMounted.current && id === actionId.current) {\n\t\t\t\tsetLoadingState(\"idle\");\n\t\t\t}\n\t\t\tresetTimerRef.current = null;\n\t\t}, 1500);\n\t};\n\n\treturn (\n\t\t<div className=\"grid gap-6\">\n\t\t\t{/* Primary Showcase */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button type=\"button\">Get Started</Button>\n\t\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t\tLearn More\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"ghost\" type=\"button\">\n\t\t\t\t\tDocumentation\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"soft\" type=\"button\">\n\t\t\t\t\tExplore\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Interactive States */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tstate={loadingState}\n\t\t\t\t\tonClick={handleAsyncAction}\n\t\t\t\t\tloadingText=\"Processing...\"\n\t\t\t\t\tsuccessText=\"Done!\"\n\t\t\t\t>\n\t\t\t\t\tTry Me\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"danger\" type=\"button\">\n\t\t\t\t\tDelete\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"success\" type=\"button\">\n\t\t\t\t\tConfirm\n\t\t\t\t</Button>\n\t\t\t\t<Button disabled type=\"button\">\n\t\t\t\t\tDisabled\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Sizes & Effects */}\n\t\t\t<div className=\"flex flex-wrap items-center gap-2\">\n\t\t\t\t<Button size=\"xs\" clickEffect=\"scale\" type=\"button\">\n\t\t\t\t\tExtra Small\n\t\t\t\t</Button>\n\t\t\t\t<Button size=\"sm\" clickEffect=\"ripple\" type=\"button\">\n\t\t\t\t\tSmall Ripple\n\t\t\t\t</Button>\n\t\t\t\t<Button size=\"md\" variant=\"soft\" type=\"button\">\n\t\t\t\t\tSoft\n\t\t\t\t</Button>\n\t\t\t\t<Button size=\"lg\" variant=\"outline\" type=\"button\">\n\t\t\t\t\tLarge Outline\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* With Icons & Features */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button aria-label=\"Settings\" type=\"button\">\n\t\t\t\t\t<Settings className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t\t<Button type=\"button\">\n\t\t\t\t\t<Mail className=\"h-4 w-4\" />\n\t\t\t\t\tSend Email\n\t\t\t\t</Button>\n\t\t\t\t<Button asChild variant=\"link\">\n\t\t\t\t\t<a href=\"#features\" className=\"no-underline\">\n\t\t\t\t\t\tView Features\n\t\t\t\t\t\t<ArrowRight className=\"h-4 w-4\" />\n\t\t\t\t\t</a>\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t\tStar\n\t\t\t\t\t<span className=\"ml-2 rounded bg-primary/10 px-1.5 py-0.5 text-xs\">\n\t\t\t\t\t\t2.3k\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["showcase","demo","comprehensive","features","variants","interactive","lucide"]},
  },
  "button-sizes": {
    name: "button-sizes",
    description: "Button component showcasing different size variants",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-sizes.tsx",
        type: "registry:block",
        target: "components/blocks/button-sizes.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-sizes") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-sizes\n * @title Button Sizes\n * @type registry:block\n * @description Button component showcasing different size variants\n * @categories [\"buttons\", \"sizes\", \"variants\"]\n * @tags [\"sizes\", \"variants\", \"xs\", \"sm\", \"md\", \"lg\", \"responsive\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonSizes() {\n\treturn (\n\t\t<div className=\"flex flex-wrap items-center gap-2\">\n\t\t\t<Button size=\"xs\" type=\"button\">Extra Small</Button>\n\t\t\t<Button size=\"sm\" type=\"button\">Small</Button>\n\t\t\t<Button size=\"md\" type=\"button\">Medium</Button>\n\t\t\t<Button size=\"lg\" type=\"button\">Large</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["sizes","variants","xs","sm","md","lg","responsive"]},
  },
  "button-social": {
    name: "button-social",
    description: "Social media buttons with brand colors and icons",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-social.tsx",
        type: "registry:block",
        target: "components/blocks/button-social.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-social") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-social\n * @title Social Media Buttons\n * @type registry:block\n * @description Social media buttons with brand colors and icons\n * @categories [\"buttons\", \"social\", \"authentication\"]\n * @tags [\"social\", \"brand\", \"authentication\", \"external\", \"icons\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport { Facebook, Github, Instagram, Linkedin, Youtube } from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonSocial() {\n\treturn (\n\t\t<div className=\"flex flex-col gap-4\">\n\t\t\t{/* Primary social buttons */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-gray-900 hover:bg-black text-white transition-all hover:shadow-lg hover:shadow-black/20\"\n\t\t\t\t>\n\t\t\t\t\t<Github className=\"h-4 w-4\" />\n\t\t\t\t\tSign in with GitHub\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-black hover:bg-gray-900 text-white transition-all hover:shadow-lg hover:shadow-black/20\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclassName=\"h-4 w-4\"\n\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t\tSign in with X\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-[#4267B2] hover:bg-[#365899] text-white transition-all hover:shadow-lg hover:shadow-[#4267B2]/25\"\n\t\t\t\t>\n\t\t\t\t\t<Facebook className=\"h-4 w-4\" />\n\t\t\t\t\tSign in with Facebook\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Outline social buttons */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"border-[#0077B5] text-[#0077B5] hover:bg-[#0077B5] hover:text-white hover:border-[#0077B5] transition-all hover:shadow-lg hover:shadow-[#0077B5]/20\"\n\t\t\t\t>\n\t\t\t\t\t<Linkedin className=\"h-4 w-4\" />\n\t\t\t\t\tConnect LinkedIn\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"border-[#E4405F] text-[#E4405F] hover:bg-[#E4405F] hover:text-white hover:border-[#E4405F] transition-all hover:shadow-lg hover:shadow-[#E4405F]/20\"\n\t\t\t\t>\n\t\t\t\t\t<Instagram className=\"h-4 w-4\" />\n\t\t\t\t\tFollow on Instagram\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"border-[#FF0000] text-[#FF0000] hover:bg-[#FF0000] hover:text-white hover:border-[#FF0000] transition-all hover:shadow-lg hover:shadow-[#FF0000]/20\"\n\t\t\t\t>\n\t\t\t\t\t<Youtube className=\"h-4 w-4\" />\n\t\t\t\t\tSubscribe on YouTube\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Icon-only social buttons */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-gray-900 hover:bg-black text-white transition-all hover:shadow-lg hover:shadow-black/20\"\n\t\t\t\t\taria-label=\"GitHub\"\n\t\t\t\t>\n\t\t\t\t\t<Github className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-black hover:bg-gray-900 text-white transition-all hover:shadow-lg hover:shadow-black/20\"\n\t\t\t\t\taria-label=\"X\"\n\t\t\t\t>\n\t\t\t\t\t<svg\n\t\t\t\t\t\tclassName=\"h-4 w-4\"\n\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-[#4267B2] hover:bg-[#365899] text-white transition-all hover:shadow-lg hover:shadow-[#4267B2]/25\"\n\t\t\t\t\taria-label=\"Facebook\"\n\t\t\t\t>\n\t\t\t\t\t<Facebook className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-[#0077B5] hover:bg-[#006097] text-white transition-all hover:shadow-lg hover:shadow-[#0077B5]/25\"\n\t\t\t\t\taria-label=\"LinkedIn\"\n\t\t\t\t>\n\t\t\t\t\t<Linkedin className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-gradient-to-br from-[#833AB4] via-[#E4405F] to-[#FCAF45] hover:opacity-90 text-white transition-all hover:shadow-lg hover:shadow-[#E4405F]/25\"\n\t\t\t\t\taria-label=\"Instagram\"\n\t\t\t\t>\n\t\t\t\t\t<Instagram className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\thoverEffect=\"lift\"\n\t\t\t\t\tclassName=\"bg-[#FF0000] hover:bg-[#e60000] text-white transition-all hover:shadow-lg hover:shadow-[#FF0000]/25\"\n\t\t\t\t\taria-label=\"YouTube\"\n\t\t\t\t>\n\t\t\t\t\t<Youtube className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["social","brand","authentication","external","icons"]},
  },
  "button-soft": {
    name: "button-soft",
    description: "Soft button variant with subtle background",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-soft.tsx",
        type: "registry:block",
        target: "components/blocks/button-soft.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-soft") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-soft\n * @title Soft Button\n * @type registry:block\n * @description Soft button variant with subtle background\n * @categories [\"buttons\", \"variants\", \"soft\"]\n * @tags [\"soft\", \"variant\", \"subtle\", \"background\", \"muted\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonSoft() {\n\treturn <Button variant=\"soft\" type=\"button\">Soft</Button>;\n}\n",
    meta: {"tags":["soft","variant","subtle","background","muted"]},
  },
  "button-states": {
    name: "button-states",
    description: "Button component showcasing different interactive states",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-states.tsx",
        type: "registry:block",
        target: "components/blocks/button-states.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-states") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-states\n * @title Interactive Button States\n * @type registry:block\n * @description Button component showcasing different interactive states\n * @categories [\"buttons\", \"states\", \"interactive\"]\n * @tags [\"states\", \"interactive\", \"idle\", \"loading\", \"success\", \"error\", \"disabled\", \"dynamic\"]\n * @dependencies [\"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonStates() {\n\tconst [state, setState] = useState<\"idle\" | \"loading\" | \"success\" | \"error\">(\n\t\t\"idle\",\n\t);\n\n\tconst handleClick = async () => {\n\t\tsetState(\"loading\");\n\t\tawait new Promise((resolve) => setTimeout(resolve, 2000));\n\t\tsetState(Math.random() > 0.5 ? \"success\" : \"error\");\n\t\tsetTimeout(() => setState(\"idle\"), 2000);\n\t};\n\n\treturn (\n\t\t<div className=\"space-y-4\">\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button state=\"idle\" type=\"button\">Idle State</Button>\n\t\t\t\t<Button state=\"loading\" type=\"button\">Loading State</Button>\n\t\t\t\t<Button state=\"success\" type=\"button\">Success State</Button>\n\t\t\t\t<Button state=\"error\" type=\"button\">Error State</Button>\n\t\t\t\t<Button state=\"disabled\" type=\"button\">Disabled State</Button>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tstate={state}\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\tloadingText=\"Processing...\"\n\t\t\t\t\tsuccessText=\"Complete!\"\n\t\t\t\t\terrorText=\"Try Again\"\n\t\t\t\t>\n\t\t\t\t\tClick to Test States\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["states","interactive","idle","loading","success","error","disabled","dynamic"]},
  },
  "button-variants": {
    name: "button-variants",
    description: "Button component showcasing all available style variants",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-variants.tsx",
        type: "registry:block",
        target: "components/blocks/button-variants.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-variants") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-variants\n * @title Button Variants Showcase\n * @type registry:block\n * @description Button component showcasing all available style variants\n * @categories [\"buttons\", \"variants\", \"showcase\"]\n * @tags [\"variants\", \"showcase\", \"solid\", \"outline\", \"ghost\", \"link\", \"danger\", \"success\", \"warning\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonVariants() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button variant=\"solid\" type=\"button\">Solid</Button>\n\t\t\t<Button variant=\"outline\" type=\"button\">Outline</Button>\n\t\t\t<Button variant=\"soft\" type=\"button\">Soft</Button>\n\t\t\t<Button variant=\"ghost\" type=\"button\">Ghost</Button>\n\t\t\t<Button variant=\"link\" type=\"button\">Link</Button>\n\t\t\t<Button variant=\"danger\" type=\"button\">Danger</Button>\n\t\t\t<Button variant=\"success\" type=\"button\">Success</Button>\n\t\t\t<Button variant=\"warning\" type=\"button\">Warning</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["variants","showcase","solid","outline","ghost","link","danger","success","warning"]},
  },
  "button-with-avatar": {
    name: "button-with-avatar",
    description: "Button with user avatars and profile information",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-with-avatar.tsx",
        type: "registry:block",
        target: "components/blocks/button-with-avatar.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-with-avatar") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-with-avatar\n * @title Button with Avatars\n * @type registry:block\n * @description Button with user avatars and profile information\n * @categories [\"buttons\", \"avatars\", \"user-interface\"]\n * @tags [\"avatars\", \"user\", \"profile\", \"account\", \"menu\", \"lucide\", \"images\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport { ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonWithAvatar() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button variant=\"ghost\">\n\t\t\t<img\n\t\t\t\tloading=\"lazy\"\n\t\t\t\tdecoding=\"async\"\n\t\t\t\twidth={20}\n\t\t\t\theight={20}\n\t\t\t\tsrc=\"https://kit.uxpatterns.dev/avatar.jpg\"\n\t\t\t\talt=\"User avatar\"\n\t\t\t\tclassName=\"h-5 w-5 rounded-full\"\n\t\t\t/>\n\t\t\t\t@thedaviddias\n\t\t\t</Button>\n\t\t\t<Button variant=\"outline\">\n\t\t\t<img\n\t\t\t\tloading=\"lazy\"\n\t\t\t\tdecoding=\"async\"\n\t\t\t\twidth={20}\n\t\t\t\theight={20}\n\t\t\t\tsrc=\"https://github.com/vercel.png\"\n\t\t\t\talt=\"Team avatar\"\n\t\t\t\tclassName=\"h-5 w-5 rounded-full\"\n\t\t\t/>\n\t\t\t\tVercel Team\n\t\t\t</Button>\n\t\t\t<Button variant=\"soft\">\n\t\t\t\t<span className=\"flex h-5 w-5 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-purple-600 text-xs font-bold text-white\">\n\t\t\t\t\tJD\n\t\t\t\t</span>\n\t\t\t\tJohn Doe\n\t\t\t</Button>\n\n\t\t\t{/* Account menu button - common in headers */}\n\t\t\t<Button\n\t\t\t\tvariant=\"ghost\"\n\t\t\t\tsize=\"sm\"\n\t\t\t\taria-label=\"Account menu\"\n\t\t\t\tclassName=\"gap-1\"\n\t\t\t>\n\t\t\t<img\n\t\t\t\tloading=\"lazy\"\n\t\t\t\tdecoding=\"async\"\n\t\t\t\twidth={24}\n\t\t\t\theight={24}\n\t\t\t\tsrc=\"https://kit.uxpatterns.dev/avatar.jpg\"\n\t\t\t\talt=\"User avatar\"\n\t\t\t\tclassName=\"h-6 w-6 rounded-full\"\n\t\t\t/>\n\t\t\t\t<ChevronDown className=\"h-4 w-4\" />\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["avatars","user","profile","account","menu","lucide","images"]},
  },
  "button-with-haptics": {
    name: "button-with-haptics",
    description: "Button with haptic feedback for mobile devices",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-with-haptics.tsx",
        type: "registry:block",
        target: "components/blocks/button-with-haptics.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-with-haptics") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-with-haptics\n * @title Haptic Feedback Buttons\n * @type registry:block\n * @description Button with haptic feedback for mobile devices\n * @categories [\"buttons\", \"haptics\", \"mobile\"]\n * @tags [\"haptics\", \"mobile\", \"feedback\", \"touch\", \"vibration\", \"interactive\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonWithHaptics() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button haptics=\"light\" type=\"button\">Light Haptic</Button>\n\t\t\t<Button haptics=\"medium\" type=\"button\">Medium Haptic</Button>\n\t\t\t<Button haptics=\"heavy\" type=\"button\">Heavy Haptic</Button>\n\t\t\t<Button haptics=\"off\" type=\"button\">No Haptic</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["haptics","mobile","feedback","touch","vibration","interactive"]},
  },
  "button-with-icons": {
    name: "button-with-icons",
    description: "Button component showcasing various icon positioning patterns",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-with-icons.tsx",
        type: "registry:block",
        target: "components/blocks/button-with-icons.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-with-icons") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-with-icons\n * @title Button Icon Patterns\n * @type registry:block\n * @description Button component showcasing various icon positioning patterns\n * @categories [\"buttons\", \"icons\", \"patterns\"]\n * @tags [\"icons\", \"patterns\", \"positioning\", \"left\", \"right\", \"only\", \"lucide\", \"accessibility\"]\n * @dependencies [\"lucide-react\"]\n * @registryDependencies [\"button\"]\n */\nimport {\n\tChevronRight,\n\tDownload,\n\tEdit,\n\tHeart,\n\tPlus,\n\tShare2,\n\tTrash,\n} from \"lucide-react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonWithIcons() {\n\treturn (\n\t\t<div className=\"space-y-6\">\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<h4 className=\"text-sm font-medium\">Icon on the Left</h4>\n\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t<Button type=\"button\">\n\t\t\t\t\t\t<Plus className=\"h-4 w-4\" />\n\t\t\t\t\t\tAdd Item\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t\t\t<Heart className=\"h-4 w-4\" />\n\t\t\t\t\t\tLike\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<h4 className=\"text-sm font-medium\">Icon on the Right</h4>\n\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t<Button type=\"button\">\n\t\t\t\t\t\tContinue\n\t\t\t\t\t\t<ChevronRight className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t\t\tDownload\n\t\t\t\t\t\t<Download className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<h4 className=\"text-sm font-medium\">Icon Only</h4>\n\t\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t\t<Button aria-label=\"Edit\" type=\"button\">\n\t\t\t\t\t\t<Edit className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"outline\" aria-label=\"Delete\" type=\"button\">\n\t\t\t\t\t\t<Trash className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"ghost\" aria-label=\"Share\" type=\"button\">\n\t\t\t\t\t\t<Share2 className=\"h-4 w-4\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["icons","patterns","positioning","left","right","only","lucide","accessibility"]},
  },
  "button-with-keyboard-shortcut": {
    name: "button-with-keyboard-shortcut",
    description: "Button with keyboard shortcut display",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-with-keyboard-shortcut.tsx",
        type: "registry:block",
        target: "components/blocks/button-with-keyboard-shortcut.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-with-keyboard-shortcut") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-with-keyboard-shortcut\n * @title Keyboard Shortcut Button\n * @type registry:block\n * @description Button with keyboard shortcut display\n * @categories [\"buttons\", \"keyboard\", \"shortcuts\"]\n * @tags [\"keyboard\", \"shortcuts\", \"kbd\", \"accessibility\", \"power-user\", \"mac\"]\n * @registryDependencies [\"button\"]\n */\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonWithKeyboardShortcut() {\n\treturn (\n\t\t<Button type=\"button\">\n\t\t\t<span>Save</span>\n\t\t\t<kbd className=\"pointer-events-none inline-flex h-5 select-none items-center rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground\">\n\t\t\t\t⌘S\n\t\t\t</kbd>\n\t\t</Button>\n\t);\n}\n",
    meta: {"tags":["keyboard","shortcuts","kbd","accessibility","power-user","mac"]},
  },
  "button-with-sound": {
    name: "button-with-sound",
    description: "Button with audio feedback and sound effects",
    type: "registry:block",
    registryDependencies: ["button"],
    files: [{
        path: "registry/default/blocks/button/button-with-sound.tsx",
        type: "registry:block",
        target: "components/blocks/button-with-sound.tsx"
      }],
    component: React.lazy(async () => {
      const mod = await import("../registry/default/blocks/button/button-with-sound") as any
      const keys = Object.keys(mod);
      const exportName = keys.find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || keys[0];
      return { default: mod.default || (exportName ? mod[exportName] : undefined) }
    }),
    source: "/**\n * @registry\n * @name button-with-sound\n * @title Sound Effects Buttons\n * @type registry:block\n * @description Button with audio feedback and sound effects\n * @categories [\"buttons\", \"sound\", \"audio\"]\n * @tags [\"sound\", \"audio\", \"feedback\", \"effects\", \"interactive\", \"accessibility\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonWithSound() {\n\treturn (\n\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t<Button sound=\"subtle\" type=\"button\">Subtle Sound</Button>\n\t\t\t<Button sound=\"click\" type=\"button\">Click Sound</Button>\n\t\t\t<Button sound=\"off\" type=\"button\">No Sound</Button>\n\t\t</div>\n\t);\n}\n",
    meta: {"tags":["sound","audio","feedback","effects","interactive","accessibility"]},
  },
};