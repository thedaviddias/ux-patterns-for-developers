{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-preview",
  "type": "registry:block",
  "title": "Button Features Showcase",
  "author": "David Dias <hello@thedaviddias.com>",
  "description": "Comprehensive button showcase with all features and variants",
  "dependencies": [
    "lucide-react",
    "react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/default/blocks/button/button-preview.tsx",
      "content": "/**\n * @registry\n * @name button-preview\n * @title Button Features Showcase\n * @type registry:block\n * @description Comprehensive button showcase with all features and variants\n * @categories [\"buttons\", \"showcase\", \"demo\"]\n * @tags [\"showcase\", \"demo\", \"comprehensive\", \"features\", \"variants\", \"interactive\", \"lucide\"]\n * @dependencies [\"lucide-react\", \"react\"]\n * @registryDependencies [\"button\"]\n */\n\"use client\";\n\nimport { ArrowRight, Mail, Settings } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/ui/button\";\n\nexport default function ButtonPreview() {\n\tconst [loadingState, setLoadingState] = useState<\n\t\t\"idle\" | \"loading\" | \"success\" | \"error\"\n\t>(\"idle\");\n\n\tconst isMounted = useRef(true);\n\tconst actionId = useRef(0);\n\tconst resetTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tisMounted.current = false;\n\t\t\t// Clear any pending reset timer on unmount\n\t\t\tif (resetTimerRef.current !== null) {\n\t\t\t\tclearTimeout(resetTimerRef.current);\n\t\t\t\tresetTimerRef.current = null;\n\t\t\t}\n\t\t};\n\t}, []);\n\n\tconst handleAsyncAction = async () => {\n\t\t// Block re-entry while loading\n\t\tif (loadingState === \"loading\") return;\n\n\t\t// Increment action ID and capture current ID\n\t\tconst id = ++actionId.current;\n\n\t\t// Set loading state with mount check\n\t\tif (isMounted.current && id === actionId.current) {\n\t\t\tsetLoadingState(\"loading\");\n\t\t}\n\n\t\t// Simulate async operation\n\t\tawait new Promise((resolve) => setTimeout(resolve, 1500));\n\n\t\t// Check if still mounted and this is the current action\n\t\tif (!isMounted.current || id !== actionId.current) return;\n\n\t\t// Deterministic outcome for testing (can be overridden with prop)\n\t\tconst shouldSucceed = Math.random() > 0.5;\n\n\t\t// Set result state with mount check\n\t\tif (isMounted.current && id === actionId.current) {\n\t\t\tsetLoadingState(shouldSucceed ? \"success\" : \"error\");\n\t\t}\n\n\t\t// Clear any existing reset timer before starting a new one\n\t\tif (resetTimerRef.current !== null) {\n\t\t\tclearTimeout(resetTimerRef.current);\n\t\t\tresetTimerRef.current = null;\n\t\t}\n\n\t\t// Reset to idle after delay with mount check\n\t\tresetTimerRef.current = setTimeout(() => {\n\t\t\tif (isMounted.current && id === actionId.current) {\n\t\t\t\tsetLoadingState(\"idle\");\n\t\t\t}\n\t\t\tresetTimerRef.current = null;\n\t\t}, 1500);\n\t};\n\n\treturn (\n\t\t<div className=\"grid gap-6\">\n\t\t\t{/* Primary Showcase */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button type=\"button\">Get Started</Button>\n\t\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t\tLearn More\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"ghost\" type=\"button\">\n\t\t\t\t\tDocumentation\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"soft\" type=\"button\">\n\t\t\t\t\tExplore\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Interactive States */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tstate={loadingState}\n\t\t\t\t\tonClick={handleAsyncAction}\n\t\t\t\t\tloadingText=\"Processing...\"\n\t\t\t\t\tsuccessText=\"Done!\"\n\t\t\t\t>\n\t\t\t\t\tTry Me\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"danger\" type=\"button\">\n\t\t\t\t\tDelete\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"success\" type=\"button\">\n\t\t\t\t\tConfirm\n\t\t\t\t</Button>\n\t\t\t\t<Button disabled type=\"button\">\n\t\t\t\t\tDisabled\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* Sizes & Effects */}\n\t\t\t<div className=\"flex flex-wrap items-center gap-2\">\n\t\t\t\t<Button size=\"xs\" clickEffect=\"scale\" type=\"button\">\n\t\t\t\t\tExtra Small\n\t\t\t\t</Button>\n\t\t\t\t<Button size=\"sm\" clickEffect=\"ripple\" type=\"button\">\n\t\t\t\t\tSmall Ripple\n\t\t\t\t</Button>\n\t\t\t\t<Button size=\"md\" variant=\"soft\" type=\"button\">\n\t\t\t\t\tSoft\n\t\t\t\t</Button>\n\t\t\t\t<Button size=\"lg\" variant=\"outline\" type=\"button\">\n\t\t\t\t\tLarge Outline\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t{/* With Icons & Features */}\n\t\t\t<div className=\"flex flex-wrap gap-2\">\n\t\t\t\t<Button aria-label=\"Settings\" type=\"button\">\n\t\t\t\t\t<Settings className=\"h-4 w-4\" />\n\t\t\t\t</Button>\n\t\t\t\t<Button type=\"button\">\n\t\t\t\t\t<Mail className=\"h-4 w-4\" />\n\t\t\t\t\tSend Email\n\t\t\t\t</Button>\n\t\t\t\t<Button asChild variant=\"link\">\n\t\t\t\t\t<a href=\"#features\" className=\"no-underline\">\n\t\t\t\t\t\tView Features\n\t\t\t\t\t\t<ArrowRight className=\"h-4 w-4\" />\n\t\t\t\t\t</a>\n\t\t\t\t</Button>\n\t\t\t\t<Button variant=\"outline\" type=\"button\">\n\t\t\t\t\tStar\n\t\t\t\t\t<span className=\"ml-2 rounded bg-primary/10 px-1.5 py-0.5 text-xs\">\n\t\t\t\t\t\t2.3k\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:block",
      "target": "components/blocks/button-preview.tsx"
    }
  ],
  "meta": {
    "tags": [
      "showcase",
      "demo",
      "comprehensive",
      "features",
      "variants",
      "interactive",
      "lucide"
    ]
  },
  "categories": [
    "buttons",
    "showcase",
    "demo"
  ]
}