{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/default/ui/button.tsx",
      "content": "\"use client\";\n\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport {\n  forwardRef,\n  useState,\n  useCallback,\n  useRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  Children,\n  cloneElement,\n  type HTMLAttributes,\n  type MouseEvent,\n  type KeyboardEvent,\n  type ReactElement\n} from \"react\";\nimport * as Motion from \"motion/react-client\";\nimport type { HTMLMotionProps } from \"motion/react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cn } from \"@/lib/utils\";\n\n/* ================= Loading Components ================= */\nconst Spinner = ({ className, ...props }: HTMLAttributes<HTMLOutputElement>) => (\n  <output\n    className={cn(\n      \"inline-block h-4 w-4 animate-spin rounded-full border-2 border-solid border-current border-r-transparent\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"sr-only\">Loading...</span>\n  </output>\n);\n\nconst Dots = ({ className, ...props }: HTMLAttributes<HTMLSpanElement>) => (\n  <span className={cn(\"inline-flex gap-1\", className)} {...props}>\n    <span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current [animation-delay:-0.3s]\"></span>\n    <span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current [animation-delay:-0.15s]\"></span>\n    <span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current\"></span>\n  </span>\n);\n\n/* ================= Configuration Objects ================= */\nconst HAPTIC_PATTERNS = {\n  light: 10,\n  medium: 20,\n  heavy: 30\n} as const;\n\nconst SOUND_CONFIGS = {\n  subtle: { frequency: 400, gain: 0.03, duration: 0.05 },\n  click: { frequency: 600, gain: 0.05, duration: 0.05 }\n} as const;\n\n/* ================= Utility Functions ================= */\nconst triggerHaptics = (intensity: \"off\" | \"light\" | \"medium\" | \"heavy\") => {\n  if (intensity === \"off\" || typeof navigator === \"undefined\") return;\n\n  if ('vibrate' in navigator) {\n    navigator.vibrate(HAPTIC_PATTERNS[intensity]);\n  }\n};\n\nconst playSound = (type: \"off\" | \"subtle\" | \"click\") => {\n  if (type === \"off\" || typeof window === \"undefined\") return;\n\n  try {\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n    const config = SOUND_CONFIGS[type];\n\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n    oscillator.frequency.value = config.frequency;\n    gainNode.gain.value = config.gain;\n\n    oscillator.start();\n    oscillator.stop(audioContext.currentTime + config.duration);\n  } catch {\n    // Silently fail if Web Audio API is not available\n  }\n};\n\n/* ================= Custom Hooks ================= */\n/**\n * Hook to manage ripple effect animation\n */\nconst useRippleEffect = (enabled: boolean) => {\n  const [rippleKey, setRippleKey] = useState<string | null>(null);\n  const [ripplePosition, setRipplePosition] = useState({ x: 0, y: 0 });\n\n  const triggerRipple = useCallback((e: MouseEvent<HTMLButtonElement>) => {\n    if (!enabled) return;\n\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    setRipplePosition({ x, y });\n    setRippleKey(`${x}-${y}-${Date.now()}`);\n  }, [enabled]);\n\n  const RippleElement = rippleKey ? (\n    <Motion.span\n      key={rippleKey}\n      className=\"absolute rounded-full pointer-events-none bg-white dark:bg-black\"\n      initial={{ scale: 0, opacity: 0.4 }}\n      animate={{ scale: 4, opacity: 0 }}\n      transition={{ duration: 0.6, ease: \"easeOut\" }}\n      style={{\n        left: ripplePosition.x,\n        top: ripplePosition.y,\n        width: \"100px\",\n        height: \"100px\",\n        transform: \"translate(-50%, -50%)\"\n      }}\n      onAnimationEnd={() => setRippleKey(null)}\n    />\n  ) : null;\n\n  return { triggerRipple, RippleElement };\n};\n\n/**\n * Hook to manage long press interactions\n */\nconst useLongPress = (config?: { duration?: number; onLongPress?: () => void }) => {\n  const [pressTimer, setPressTimer] = useState<number | null>(null);\n\n  const startLongPress = useCallback(() => {\n    if (!config?.onLongPress) return;\n    const id = window.setTimeout(() => config.onLongPress?.(), config.duration ?? 500);\n    setPressTimer(id);\n  }, [config]);\n\n  const clearLongPress = useCallback(() => {\n    if (pressTimer) window.clearTimeout(pressTimer);\n    setPressTimer(null);\n  }, [pressTimer]);\n\n  return { startLongPress, clearLongPress };\n};\n\n/* ================= Type Definitions ================= */\nexport type ButtonState = \"idle\" | \"loading\" | \"success\" | \"error\" | \"disabled\";\nexport type ButtonClickEffect = \"none\" | \"scale\" | \"ripple\" | \"pulse\" | \"spring\";\nexport type ButtonHoverEffect = \"none\" | \"glow\" | \"shine\" | \"shimmer\" | \"lift\";\nexport type LoadingType = \"spinner\" | \"dots\";\n\n/* ================= Button Variants Configuration ================= */\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center font-medium cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-60 aria-disabled:cursor-not-allowed aria-disabled:opacity-60 transition-[background,shadow,transform] select-none\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tsolid:\n\t\t\t\t\t\"bg-primary text-primary-foreground shadow hover:enabled:bg-primary/90 aria-disabled:hover:bg-primary\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border-2 border-primary/50 bg-transparent hover:enabled:bg-primary/5 hover:enabled:border-primary/70 aria-disabled:hover:bg-transparent aria-disabled:hover:border-primary/50\",\n\t\t\t\tghost: \"hover:enabled:bg-accent hover:enabled:text-accent-foreground aria-disabled:hover:bg-transparent aria-disabled:hover:text-current\",\n\t\t\t\tlink: \"text-primary hover:enabled:text-primary/80\",\n        soft:\n          \"bg-primary/10 text-primary hover:enabled:bg-primary/20 aria-disabled:hover:bg-primary/10\",\n        danger:\n          \"bg-red-600 text-white hover:enabled:bg-red-700 aria-disabled:hover:bg-red-600 focus-visible:ring-red-500\",\n        success:\n          \"bg-emerald-600 text-white hover:enabled:bg-emerald-700 aria-disabled:hover:bg-emerald-600 focus-visible:ring-emerald-500\",\n        warning:\n          \"bg-amber-500 text-black hover:enabled:bg-amber-600 aria-disabled:hover:bg-amber-500 focus-visible:ring-amber-500\"\n\t\t\t},\n\t\t\tsize: {\n        xs: \"h-7 min-w-[2.5rem] gap-1.5 px-2 text-[0.78rem]\",\n        sm: \"h-8 min-w-[3rem] gap-1.5 px-3 text-[0.85rem]\",\n        md: \"h-10 min-w-[4rem] gap-2 px-4 text-[0.925rem]\",\n        lg: \"h-12 min-w-[4.5rem] gap-2 px-5 text-[1rem]\"\n      },\n      clickEffect: {\n        none: \"\",\n        scale: \"active:scale-[0.98]\",\n        ripple: \"relative overflow-hidden\",\n        pulse: \"\",\n        spring: \"\"\n      },\n      hoverEffect: {\n        none: \"\",\n        glow: \"hover:shadow-[0_0_20px_rgba(59,130,246,0.35)]\",\n        shine: \"relative overflow-hidden\",\n        shimmer: \"relative overflow-hidden\",\n        lift: \"hover:-translate-y-0.5 transition-transform\"\n      },\n      wide: { true: \"w-full\", false: \"\" },\n      rounded: {\n        default: \"rounded-[var(--btn-radius,0.55rem)]\",\n        pill: \"rounded-full\"\n      },\n      shadow: {\n        none: \"\",\n        sm: \"shadow-sm\",\n        md: \"shadow-md\",\n        lg: \"shadow-lg\",\n        colored: \"\"\n      }\n\t\t},\n    defaultVariants: {\n      variant: \"solid\",\n      size: \"md\",\n      clickEffect: \"scale\",\n      hoverEffect: \"none\",\n      wide: false,\n      rounded: \"default\",\n      shadow: \"none\"\n    },\n    compoundVariants: [\n      {\n        variant: \"danger\",\n        shadow: \"colored\",\n        className: \"shadow-lg shadow-red-500/25\"\n      },\n      {\n        variant: \"success\",\n        shadow: \"colored\",\n        className: \"shadow-lg shadow-emerald-500/25\"\n      },\n      {\n        variant: \"warning\",\n        shadow: \"colored\",\n        className: \"shadow-lg shadow-amber-500/25\"\n      },\n      {\n        variant: \"solid\",\n        shadow: \"colored\",\n        className: \"shadow-lg shadow-primary/25\"\n      }\n    ]\n\t},\n);\n\n/* ================= Button Props Interface ================= */\n/**\n * Enhanced button component with motion effects, haptic feedback, and advanced state management.\n * Extends HTML button with Framer Motion support and interactive features.\n */\nexport type ButtonProps = HTMLMotionProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n    /** Visual and interactive state of the button */\n    state?: ButtonState;\n    /** Loading indicator style (spinner or dots) */\n    loadingType?: LoadingType;\n    /** Text displayed during loading state */\n    loadingText?: string;\n    /** Text displayed on success */\n    successText?: string;\n    /** Text displayed on error */\n    errorText?: string;\n    preventDoubleClick?: boolean;\n    /** Long press configuration for desktop and mobile */\n    longPress?: { duration?: number; onLongPress?: () => void };\n    tooltipWhenDisabled?: string;\n    preserveWidth?: boolean;\n    /** Haptic feedback intensity (mobile devices with vibration API) */\n    haptics?: \"off\" | \"light\" | \"medium\" | \"heavy\";\n    /** Audio feedback on interaction */\n    sound?: \"off\" | \"subtle\" | \"click\";\n    announceChanges?: boolean;\n    analytics?: { event: string; payload?: Record<string, unknown> };\n    onAction?: () => Promise<void> | void;\n    /** Enable console debugging for button interactions */\n    debug?: boolean;\n    /** Force native HTML disabled attribute instead of aria-disabled */\n    forceNativeDisabled?: boolean;\n  };\n\n/* ================= Motion Animation Helpers ================= */\nconst getMotionProps = (clickEffect?: ButtonClickEffect | null, hoverEffect?: ButtonHoverEffect | null): any => {\n  const props: any = {};\n\n  // Click effect animations\n  switch (clickEffect) {\n    case \"scale\":\n      props.whileTap = { scale: 0.98 };\n      props.transition = { duration: 0.1 };\n      break;\n    case \"pulse\":\n      // Pulse effect handled by click state\n      break;\n    case \"spring\":\n      props.whileTap = { scale: 0.95 };\n      props.transition = { type: \"spring\", stiffness: 400, damping: 17 };\n      break;\n  }\n\n  // Hover effect animations\n  switch (hoverEffect) {\n    case \"glow\":\n      props.whileHover = {\n        boxShadow: \"0 0 25px rgba(var(--primary-rgb, 59,130,246), 0.5)\"\n      };\n      if (!props.transition) props.transition = { duration: 0.3 };\n      break;\n    case \"shine\":\n      // Shine effect handled by Motion.div overlay\n      break;\n    case \"shimmer\":\n      // Shimmer effect handled by Motion.div overlay\n      break;\n  }\n\n  return props;\n};\n\n/* ================= Main Button Component ================= */\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      children,\n      variant,\n      size,\n      clickEffect,\n      hoverEffect,\n      wide,\n      rounded,\n      shadow,\n      asChild = false,\n      state = \"idle\",\n      loadingType = \"spinner\",\n      loadingText = \"Working…\",\n      successText = \"Done\",\n      errorText = \"Try again\",\n      preventDoubleClick = true,\n      longPress,\n      tooltipWhenDisabled,\n      preserveWidth = true,\n      haptics: hapticPref = \"off\",\n      sound: soundPref = \"off\",\n      announceChanges,\n      analytics,\n      onAction,\n      debug,\n      disabled,\n      forceNativeDisabled = false,\n      type = \"button\",\n      onClick,\n      onMouseDown,\n      onKeyDown,\n      ...props\n    },\n    ref\n  ) => {\n    /* ========== Internal State Management ========== */\n    const btnRef = useRef<HTMLButtonElement>(null);\n    useImperativeHandle(ref, () => btnRef.current as HTMLButtonElement);\n\n    const [minWidth, setMinWidth] = useState<number>();\n    const [isClicking, setIsClicking] = useState(false);\n    const [isPulsing, setIsPulsing] = useState(false);\n    const effectiveDisabled = disabled || state === \"disabled\";\n\n    /* ========== Custom Hooks ========== */\n    const { triggerRipple, RippleElement } = useRippleEffect(clickEffect === \"ripple\");\n    const { startLongPress, clearLongPress } = useLongPress(longPress);\n\n    /* ========== Width Preservation ========== */\n    useLayoutEffect(() => {\n      if (!preserveWidth || !btnRef.current) return;\n      const el = btnRef.current;\n      const capture = () => setMinWidth((w) => w ?? el.offsetWidth);\n      el.addEventListener(\"mousedown\", capture, { once: true });\n      el.addEventListener(\"touchstart\", capture, { once: true, passive: true });\n      return () => {\n        el.removeEventListener(\"mousedown\", capture);\n        el.removeEventListener(\"touchstart\", capture);\n      };\n    }, [preserveWidth]);\n\n    /* ========== Event Handlers ========== */\n    const handleClick = async (e: MouseEvent<HTMLButtonElement>) => {\n      onClick?.(e);\n      if (e.defaultPrevented) return;\n      if (effectiveDisabled || state === \"loading\") return;\n      if (preventDoubleClick && isClicking) return;\n\n      // Trigger pulse animation\n      if (clickEffect === \"pulse\") {\n        setIsPulsing(true);\n        setTimeout(() => setIsPulsing(false), 2000); // Stop after 2 seconds (1 pulse)\n      }\n\n      // Double-click prevention\n      if (preventDoubleClick) {\n        setIsClicking(true);\n        setTimeout(() => setIsClicking(false), 300);\n      }\n\n      // Analytics tracking\n      if (analytics?.event && process.env.NODE_ENV !== \"test\") {\n        queueMicrotask(() => {\n          window.dispatchEvent(\n            new CustomEvent(\"uxp:analytics\", { detail: { component: \"button\", ...analytics } })\n          );\n        });\n      }\n\n      // Interactive feedback\n      triggerHaptics(hapticPref);\n      playSound(soundPref);\n      triggerRipple(e);\n\n      if (onAction) await onAction();\n    };\n\n    const handleMouseDown = (e: MouseEvent<HTMLButtonElement>) => {\n      onMouseDown?.(e);\n      if (e.defaultPrevented) return;\n      startLongPress();\n    };\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLButtonElement>) => {\n      onKeyDown?.(e);\n      if (e.defaultPrevented) return;\n      if ((e.key === \" \" || e.key === \"Enter\") && longPress) startLongPress();\n    };\n\n    /* ========== Content Generation ========== */\n    const label =\n      state === \"loading\"\n        ? loadingText\n        : state === \"success\"\n        ? successText\n        : state === \"error\"\n        ? errorText\n        : children;\n\n    const LoadingVisual = state === \"loading\" ? (\n      loadingType === \"dots\" ? (\n        <Dots aria-hidden className=\"-ml-1\" />\n      ) : (\n        <Spinner aria-hidden className=\"-ml-1\" />\n      )\n    ) : null;\n\n    /* ========== AsChild Pattern Handling ========== */\n    if (asChild) {\n      const child = Children.only(children) as ReactElement<any>;\n      return cloneElement(child, {\n        className: cn(\n          buttonVariants({ variant, size, clickEffect, hoverEffect, wide }),\n          debug && \"outline outline-dashed outline-2 outline-fuchsia-500/40\",\n          className,\n          child.props.className\n        ),\n        \"aria-busy\": state === \"loading\" || undefined,\n        \"aria-live\": announceChanges ? \"polite\" : undefined,\n        \"aria-disabled\": !forceNativeDisabled && effectiveDisabled ? true : undefined,\n        disabled: forceNativeDisabled && (disabled || state === \"disabled\") ? true : undefined,\n        \"data-state\": state,\n        style: { ...(child.props.style || {}), minWidth },\n        onClick: (e: MouseEvent) => {\n          child.props?.onClick?.(e);\n          handleClick(e as MouseEvent<HTMLButtonElement>);\n        },\n        onMouseDown: (e: MouseEvent) => {\n          child.props?.onMouseDown?.(e);\n          handleMouseDown(e as MouseEvent<HTMLButtonElement>);\n        },\n        onMouseUp: (e: MouseEvent) => {\n          child.props?.onMouseUp?.(e);\n          clearLongPress();\n        },\n        onMouseLeave: (e: MouseEvent) => {\n          child.props?.onMouseLeave?.(e);\n          clearLongPress();\n        },\n        onKeyDown: (e: KeyboardEvent) => {\n          child.props?.onKeyDown?.(e);\n          handleKeyDown(e as KeyboardEvent<HTMLButtonElement>);\n        },\n        onKeyUp: (e: KeyboardEvent) => {\n          child.props?.onKeyUp?.(e);\n          clearLongPress();\n        },\n        ref: ref,\n        children: (\n          <>\n            {RippleElement}\n            {LoadingVisual}\n            <span className=\"sr-only\" aria-live={announceChanges ? \"polite\" : undefined} />\n            {state === \"loading\" ? loadingText : child.props.children}\n          </>\n        )\n      } as any);\n    }\n\n    /* ========== Main Button Render ========== */\n    const Comp = asChild ? Slot : Motion.button;\n\n    return (\n      <Comp\n        ref={btnRef}\n        type={asChild ? undefined : type}\n        className={cn(\n          buttonVariants({ variant, size, clickEffect, hoverEffect, wide, rounded, shadow }),\n          debug && \"outline outline-dashed outline-2 outline-fuchsia-500/40\",\n          className\n        )}\n        aria-busy={state === \"loading\" || undefined}\n        aria-live={announceChanges ? \"polite\" : undefined}\n        aria-disabled={!forceNativeDisabled && effectiveDisabled ? true : undefined}\n        disabled={forceNativeDisabled && (disabled || state === \"disabled\") ? true : undefined}\n        data-state={state}\n        style={{\n          minWidth,\n          position: \"relative\",\n          // Only apply overflow hidden for effects that need it\n          ...(clickEffect === \"ripple\" || hoverEffect === \"shine\" || hoverEffect === \"shimmer\"\n            ? { overflow: \"hidden\" }\n            : {})\n        }}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        onMouseUp={clearLongPress}\n        onMouseLeave={clearLongPress}\n        onKeyDown={handleKeyDown}\n        onKeyUp={clearLongPress}\n        {...getMotionProps(clickEffect, hoverEffect)}\n        {...props}\n      >\n        {/* Hover effect overlays */}\n        {hoverEffect === \"shine\" && (\n          <Motion.div\n            className=\"absolute inset-0 -z-10 pointer-events-none overflow-hidden rounded-[inherit]\"\n            initial={{ x: \"-100%\" }}\n            whileHover={{ x: \"100%\" }}\n            transition={{ duration: 0.6, ease: \"easeOut\" }}\n            style={{\n              background: \"linear-gradient(105deg, transparent 40%, rgba(255,255,255,0.5) 50%, transparent 60%)\",\n              width: \"100%\"\n            }}\n          />\n        )}\n        {hoverEffect === \"shimmer\" && (\n          <Motion.div\n            className=\"absolute inset-0 -z-10 pointer-events-none overflow-hidden rounded-[inherit]\"\n            style={{\n              background: \"linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.4) 50%, transparent 100%)\",\n              width: \"200%\"\n            }}\n            initial={{ x: \"-200%\" }}\n            animate={{ x: \"200%\" }}\n            transition={{\n              duration: 2,\n              repeat: Infinity,\n              ease: \"linear\",\n              repeatDelay: 1\n            }}\n          />\n        )}\n\n\n        {/* Pulse effect */}\n        {isPulsing && clickEffect === \"pulse\" && (\n          <>\n            <Motion.span\n              className=\"absolute inset-0 rounded-[inherit] pointer-events-none dark:hidden\"\n              initial={{ boxShadow: \"0 0 0 0 rgba(0, 0, 0, 0.3)\" }}\n              animate={{ boxShadow: \"0 0 0 15px rgba(0, 0, 0, 0)\" }}\n              transition={{\n                duration: 1,\n                ease: \"easeOut\"\n              }}\n            />\n            <Motion.span\n              className=\"absolute inset-0 rounded-[inherit] pointer-events-none hidden dark:block\"\n              initial={{ boxShadow: \"0 0 0 0 rgba(255, 255, 255, 0.3)\" }}\n              animate={{ boxShadow: \"0 0 0 15px rgba(255, 255, 255, 0)\" }}\n              transition={{\n                duration: 1,\n                ease: \"easeOut\"\n              }}\n            />\n          </>\n        )}\n\n        {/* Ripple effect */}\n        {RippleElement}\n\n        {/* Button content */}\n        {LoadingVisual}\n        <span className=\"sr-only\" aria-live={announceChanges ? \"polite\" : undefined} />\n        {label}\n      </Comp>\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "tags": []
  }
}