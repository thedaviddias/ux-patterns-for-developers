{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "title": "button",
  "author": "David Dias <hello@thedaviddias.com>",
  "description": "Auto-generated button component",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/default/ui/button.tsx",
      "content": "\"use client\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport type { HTMLMotionProps } from \"motion/react\";\nimport * as Motion from \"motion/react-client\";\nimport {\n\tChildren,\n\tcloneElement,\n\tforwardRef,\n\ttype HTMLAttributes,\n\ttype KeyboardEvent,\n\ttype MouseEvent,\n\ttype ReactElement,\n\tuseCallback,\n\tuseImperativeHandle,\n\tuseLayoutEffect,\n\tuseRef,\n\tuseState,\n} from \"react\";\nimport { cn } from \"@/lib/utils\";\n\n/* ================= Loading Components ================= */\nconst Spinner = ({\n\tclassName,\n\t...props\n}: HTMLAttributes<HTMLOutputElement>) => (\n\t<output\n\t\tclassName={cn(\n\t\t\t\"inline-block h-4 w-4 animate-spin rounded-full border-2 border-solid border-current border-r-transparent\",\n\t\t\tclassName,\n\t\t)}\n\t\t{...props}\n\t>\n\t\t<span className=\"sr-only\">Loading...</span>\n\t</output>\n);\n\nconst Dots = ({ className, ...props }: HTMLAttributes<HTMLSpanElement>) => (\n\t<span className={cn(\"inline-flex gap-1\", className)} {...props}>\n\t\t<span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current [animation-delay:-0.3s]\"></span>\n\t\t<span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current [animation-delay:-0.15s]\"></span>\n\t\t<span className=\"h-1.5 w-1.5 animate-bounce rounded-full bg-current\"></span>\n\t</span>\n);\n\n/* ================= Configuration Objects ================= */\nconst HAPTIC_PATTERNS = {\n\tlight: 10,\n\tmedium: 20,\n\theavy: 30,\n} as const;\n\nconst SOUND_CONFIGS = {\n\tsubtle: { frequency: 400, gain: 0.03, duration: 0.05 },\n\tclick: { frequency: 600, gain: 0.05, duration: 0.05 },\n} as const;\n\n/* ================= Utility Functions ================= */\nconst triggerHaptics = (intensity: \"off\" | \"light\" | \"medium\" | \"heavy\") => {\n\tif (intensity === \"off\" || typeof navigator === \"undefined\") return;\n\n\tif (\"vibrate\" in navigator) {\n\t\tnavigator.vibrate(HAPTIC_PATTERNS[intensity]);\n\t}\n};\n\nconst playSound = (type: \"off\" | \"subtle\" | \"click\") => {\n\tif (type === \"off\" || typeof window === \"undefined\") return;\n\n\ttry {\n\t\tconst audioContext = new (\n\t\t\twindow.AudioContext || (window as any).webkitAudioContext\n\t\t)();\n\t\tconst oscillator = audioContext.createOscillator();\n\t\tconst gainNode = audioContext.createGain();\n\t\tconst config = SOUND_CONFIGS[type];\n\n\t\toscillator.connect(gainNode);\n\t\tgainNode.connect(audioContext.destination);\n\t\toscillator.frequency.value = config.frequency;\n\t\tgainNode.gain.value = config.gain;\n\n\t\toscillator.start();\n\t\toscillator.stop(audioContext.currentTime + config.duration);\n\t} catch {\n\t\t// Silently fail if Web Audio API is not available\n\t}\n};\n\n/* ================= Custom Hooks ================= */\n/**\n * Hook to manage ripple effect animation\n */\nconst useRippleEffect = (enabled: boolean) => {\n\tconst [rippleKey, setRippleKey] = useState<string | null>(null);\n\tconst [ripplePosition, setRipplePosition] = useState({ x: 0, y: 0 });\n\n\tconst triggerRipple = useCallback(\n\t\t(e: MouseEvent<HTMLButtonElement>) => {\n\t\t\tif (!enabled) return;\n\n\t\t\tconst rect = e.currentTarget.getBoundingClientRect();\n\t\t\tconst x = e.clientX - rect.left;\n\t\t\tconst y = e.clientY - rect.top;\n\t\t\tsetRipplePosition({ x, y });\n\t\t\tsetRippleKey(`${x}-${y}-${Date.now()}`);\n\t\t},\n\t\t[enabled],\n\t);\n\n\tconst RippleElement = rippleKey ? (\n\t\t<Motion.span\n\t\t\tkey={rippleKey}\n\t\t\tclassName=\"absolute rounded-full pointer-events-none bg-white dark:bg-black\"\n\t\t\tinitial={{ scale: 0, opacity: 0.4 }}\n\t\t\tanimate={{ scale: 4, opacity: 0 }}\n\t\t\ttransition={{ duration: 0.6, ease: \"easeOut\" }}\n\t\t\tstyle={{\n\t\t\t\tleft: ripplePosition.x,\n\t\t\t\ttop: ripplePosition.y,\n\t\t\t\twidth: \"100px\",\n\t\t\t\theight: \"100px\",\n\t\t\t\ttransform: \"translate(-50%, -50%)\",\n\t\t\t}}\n\t\t\tonAnimationEnd={() => setRippleKey(null)}\n\t\t/>\n\t) : null;\n\n\treturn { triggerRipple, RippleElement };\n};\n\n/**\n * Hook to manage long press interactions\n */\nconst useLongPress = (config?: {\n\tduration?: number;\n\tonLongPress?: () => void;\n}) => {\n\tconst [pressTimer, setPressTimer] = useState<number | null>(null);\n\n\tconst startLongPress = useCallback(() => {\n\t\tif (!config?.onLongPress) return;\n\t\tconst id = window.setTimeout(\n\t\t\t() => config.onLongPress?.(),\n\t\t\tconfig.duration ?? 500,\n\t\t);\n\t\tsetPressTimer(id);\n\t}, [config]);\n\n\tconst clearLongPress = useCallback(() => {\n\t\tif (pressTimer) window.clearTimeout(pressTimer);\n\t\tsetPressTimer(null);\n\t}, [pressTimer]);\n\n\treturn { startLongPress, clearLongPress };\n};\n\n/* ================= Type Definitions ================= */\nexport type ButtonState = \"idle\" | \"loading\" | \"success\" | \"error\" | \"disabled\";\nexport type ButtonClickEffect =\n\t| \"none\"\n\t| \"scale\"\n\t| \"ripple\"\n\t| \"pulse\"\n\t| \"spring\";\nexport type ButtonHoverEffect = \"none\" | \"glow\" | \"shine\" | \"shimmer\" | \"lift\";\nexport type LoadingType = \"spinner\" | \"dots\";\n\n/* ================= Button Variants Configuration ================= */\nconst buttonVariants = cva(\n\t\"inline-flex items-center justify-center font-medium cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-60 aria-disabled:cursor-not-allowed aria-disabled:opacity-60 transition-[background,shadow,transform] select-none\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tsolid:\n\t\t\t\t\t\"bg-primary text-primary-foreground shadow hover:enabled:bg-primary/90 aria-disabled:hover:bg-primary\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border-2 border-primary/50 bg-transparent hover:enabled:bg-primary/5 hover:enabled:border-primary/70 aria-disabled:hover:bg-transparent aria-disabled:hover:border-primary/50\",\n\t\t\t\tghost:\n\t\t\t\t\t\"hover:enabled:bg-accent hover:enabled:text-accent-foreground aria-disabled:hover:bg-transparent aria-disabled:hover:text-current\",\n\t\t\t\tlink: \"text-primary hover:enabled:text-primary/80\",\n\t\t\t\tsoft: \"bg-primary/10 text-primary hover:enabled:bg-primary/20 aria-disabled:hover:bg-primary/10\",\n\t\t\t\tdanger:\n\t\t\t\t\t\"bg-red-600 text-white hover:enabled:bg-red-700 aria-disabled:hover:bg-red-600 focus-visible:ring-red-500\",\n\t\t\t\tsuccess:\n\t\t\t\t\t\"bg-emerald-600 text-white hover:enabled:bg-emerald-700 aria-disabled:hover:bg-emerald-600 focus-visible:ring-emerald-500\",\n\t\t\t\twarning:\n\t\t\t\t\t\"bg-amber-500 text-black hover:enabled:bg-amber-600 aria-disabled:hover:bg-amber-500 focus-visible:ring-amber-500\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\txs: \"h-7 min-w-[2.5rem] gap-1.5 px-2 text-[0.78rem]\",\n\t\t\t\tsm: \"h-8 min-w-[3rem] gap-1.5 px-3 text-[0.85rem]\",\n\t\t\t\tmd: \"h-10 min-w-[4rem] gap-2 px-4 text-[0.925rem]\",\n\t\t\t\tlg: \"h-12 min-w-[4.5rem] gap-2 px-5 text-[1rem]\",\n\t\t\t},\n\t\t\tclickEffect: {\n\t\t\t\tnone: \"\",\n\t\t\t\tscale: \"active:scale-[0.98]\",\n\t\t\t\tripple: \"relative overflow-hidden\",\n\t\t\t\tpulse: \"\",\n\t\t\t\tspring: \"\",\n\t\t\t},\n\t\t\thoverEffect: {\n\t\t\t\tnone: \"\",\n\t\t\t\tglow: \"hover:shadow-[0_0_20px_rgba(59,130,246,0.35)]\",\n\t\t\t\tshine: \"relative overflow-hidden\",\n\t\t\t\tshimmer: \"relative overflow-hidden\",\n\t\t\t\tlift: \"hover:-translate-y-0.5 transition-transform\",\n\t\t\t},\n\t\t\twide: { true: \"w-full\", false: \"\" },\n\t\t\trounded: {\n\t\t\t\tdefault: \"rounded-[var(--btn-radius,0.55rem)]\",\n\t\t\t\tpill: \"rounded-full\",\n\t\t\t},\n\t\t\tshadow: {\n\t\t\t\tnone: \"\",\n\t\t\t\tsm: \"shadow-sm\",\n\t\t\t\tmd: \"shadow-md\",\n\t\t\t\tlg: \"shadow-lg\",\n\t\t\t\tcolored: \"\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"solid\",\n\t\t\tsize: \"md\",\n\t\t\tclickEffect: \"scale\",\n\t\t\thoverEffect: \"none\",\n\t\t\twide: false,\n\t\t\trounded: \"default\",\n\t\t\tshadow: \"none\",\n\t\t},\n\t\tcompoundVariants: [\n\t\t\t{\n\t\t\t\tvariant: \"danger\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-red-500/25\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tvariant: \"success\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-emerald-500/25\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tvariant: \"warning\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-amber-500/25\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tvariant: \"solid\",\n\t\t\t\tshadow: \"colored\",\n\t\t\t\tclassName: \"shadow-lg shadow-primary/25\",\n\t\t\t},\n\t\t],\n\t},\n);\n\n/* ================= Button Props Interface ================= */\n/**\n * Enhanced button component with motion effects, haptic feedback, and advanced state management.\n * Extends HTML button with Framer Motion support and interactive features.\n */\nexport type ButtonProps = HTMLMotionProps<\"button\"> &\n\tVariantProps<typeof buttonVariants> & {\n\t\tasChild?: boolean;\n\t\t/** Visual and interactive state of the button */\n\t\tstate?: ButtonState;\n\t\t/** Loading indicator style (spinner or dots) */\n\t\tloadingType?: LoadingType;\n\t\t/** Text displayed during loading state */\n\t\tloadingText?: string;\n\t\t/** Text displayed on success */\n\t\tsuccessText?: string;\n\t\t/** Text displayed on error */\n\t\terrorText?: string;\n\t\tpreventDoubleClick?: boolean;\n\t\t/** Long press configuration for desktop and mobile */\n\t\tlongPress?: { duration?: number; onLongPress?: () => void };\n\t\ttooltipWhenDisabled?: string;\n\t\tpreserveWidth?: boolean;\n\t\t/** Haptic feedback intensity (mobile devices with vibration API) */\n\t\thaptics?: \"off\" | \"light\" | \"medium\" | \"heavy\";\n\t\t/** Audio feedback on interaction */\n\t\tsound?: \"off\" | \"subtle\" | \"click\";\n\t\tannounceChanges?: boolean;\n\t\tanalytics?: { event: string; payload?: Record<string, unknown> };\n\t\tonAction?: () => Promise<void> | void;\n\t\t/** Enable console debugging for button interactions */\n\t\tdebug?: boolean;\n\t\t/** Force native HTML disabled attribute instead of aria-disabled */\n\t\tforceNativeDisabled?: boolean;\n\t};\n\n/* ================= Motion Animation Helpers ================= */\nconst getMotionProps = (\n\tclickEffect?: ButtonClickEffect | null,\n\thoverEffect?: ButtonHoverEffect | null,\n): any => {\n\tconst props: any = {};\n\n\t// Click effect animations\n\tswitch (clickEffect) {\n\t\tcase \"scale\":\n\t\t\tprops.whileTap = { scale: 0.98 };\n\t\t\tprops.transition = { duration: 0.1 };\n\t\t\tbreak;\n\t\tcase \"pulse\":\n\t\t\t// Pulse effect handled by click state\n\t\t\tbreak;\n\t\tcase \"spring\":\n\t\t\tprops.whileTap = { scale: 0.95 };\n\t\t\tprops.transition = { type: \"spring\", stiffness: 400, damping: 17 };\n\t\t\tbreak;\n\t}\n\n\t// Hover effect animations\n\tswitch (hoverEffect) {\n\t\tcase \"glow\":\n\t\t\tprops.whileHover = {\n\t\t\t\tboxShadow: \"0 0 25px rgba(var(--primary-rgb, 59,130,246), 0.5)\",\n\t\t\t};\n\t\t\tif (!props.transition) props.transition = { duration: 0.3 };\n\t\t\tbreak;\n\t\tcase \"shine\":\n\t\t\t// Shine effect handled by Motion.div overlay\n\t\t\tbreak;\n\t\tcase \"shimmer\":\n\t\t\t// Shimmer effect handled by Motion.div overlay\n\t\t\tbreak;\n\t}\n\n\treturn props;\n};\n\n/* ================= Main Button Component ================= */\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\tchildren,\n\t\t\tvariant,\n\t\t\tsize,\n\t\t\tclickEffect,\n\t\t\thoverEffect,\n\t\t\twide,\n\t\t\trounded,\n\t\t\tshadow,\n\t\t\tasChild = false,\n\t\t\tstate = \"idle\",\n\t\t\tloadingType = \"spinner\",\n\t\t\tloadingText = \"Working…\",\n\t\t\tsuccessText = \"Done\",\n\t\t\terrorText = \"Try again\",\n\t\t\tpreventDoubleClick = true,\n\t\t\tlongPress,\n\t\t\ttooltipWhenDisabled,\n\t\t\tpreserveWidth = true,\n\t\t\thaptics: hapticPref = \"off\",\n\t\t\tsound: soundPref = \"off\",\n\t\t\tannounceChanges,\n\t\t\tanalytics,\n\t\t\tonAction,\n\t\t\tdebug,\n\t\t\tdisabled,\n\t\t\tforceNativeDisabled = false,\n\t\t\ttype = \"button\",\n\t\t\tonClick,\n\t\t\tonMouseDown,\n\t\t\tonKeyDown,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\t/* ========== Internal State Management ========== */\n\t\tconst btnRef = useRef<HTMLButtonElement>(null);\n\t\tuseImperativeHandle(ref, () => btnRef.current as HTMLButtonElement);\n\n\t\tconst [minWidth, setMinWidth] = useState<number>();\n\t\tconst [isClicking, setIsClicking] = useState(false);\n\t\tconst [isPulsing, setIsPulsing] = useState(false);\n\t\tconst effectiveDisabled = disabled || state === \"disabled\";\n\n\t\t/* ========== Custom Hooks ========== */\n\t\tconst { triggerRipple, RippleElement } = useRippleEffect(\n\t\t\tclickEffect === \"ripple\",\n\t\t);\n\t\tconst { startLongPress, clearLongPress } = useLongPress(longPress);\n\n\t\t/* ========== Width Preservation ========== */\n\t\tuseLayoutEffect(() => {\n\t\t\tif (!preserveWidth || !btnRef.current) return;\n\t\t\tconst el = btnRef.current;\n\t\t\tconst capture = () => setMinWidth((w) => w ?? el.offsetWidth);\n\t\t\tel.addEventListener(\"mousedown\", capture, { once: true });\n\t\t\tel.addEventListener(\"touchstart\", capture, { once: true, passive: true });\n\t\t\treturn () => {\n\t\t\t\tel.removeEventListener(\"mousedown\", capture);\n\t\t\t\tel.removeEventListener(\"touchstart\", capture);\n\t\t\t};\n\t\t}, [preserveWidth]);\n\n\t\t/* ========== Event Handlers ========== */\n\t\tconst handleClick = async (e: MouseEvent<HTMLButtonElement>) => {\n\t\t\tonClick?.(e);\n\t\t\tif (e.defaultPrevented) return;\n\t\t\tif (effectiveDisabled || state === \"loading\") return;\n\t\t\tif (preventDoubleClick && isClicking) return;\n\n\t\t\t// Trigger pulse animation\n\t\t\tif (clickEffect === \"pulse\") {\n\t\t\t\tsetIsPulsing(true);\n\t\t\t\tsetTimeout(() => setIsPulsing(false), 2000); // Stop after 2 seconds (1 pulse)\n\t\t\t}\n\n\t\t\t// Double-click prevention\n\t\t\tif (preventDoubleClick) {\n\t\t\t\tsetIsClicking(true);\n\t\t\t\tsetTimeout(() => setIsClicking(false), 300);\n\t\t\t}\n\n\t\t\t// Analytics tracking\n\t\t\tif (analytics?.event && process.env.NODE_ENV !== \"test\") {\n\t\t\t\tqueueMicrotask(() => {\n\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\tnew CustomEvent(\"uxp:analytics\", {\n\t\t\t\t\t\t\tdetail: { component: \"button\", ...analytics },\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Interactive feedback\n\t\t\ttriggerHaptics(hapticPref);\n\t\t\tplaySound(soundPref);\n\t\t\ttriggerRipple(e);\n\n\t\t\tif (onAction) await onAction();\n\t\t};\n\n\t\tconst handleMouseDown = (e: MouseEvent<HTMLButtonElement>) => {\n\t\t\tonMouseDown?.(e);\n\t\t\tif (e.defaultPrevented) return;\n\t\t\tstartLongPress();\n\t\t};\n\n\t\tconst handleKeyDown = (e: KeyboardEvent<HTMLButtonElement>) => {\n\t\t\tonKeyDown?.(e);\n\t\t\tif (e.defaultPrevented) return;\n\t\t\tif ((e.key === \" \" || e.key === \"Enter\") && longPress) startLongPress();\n\t\t};\n\n\t\t/* ========== Content Generation ========== */\n\t\tconst label =\n\t\t\tstate === \"loading\"\n\t\t\t\t? loadingText\n\t\t\t\t: state === \"success\"\n\t\t\t\t\t? successText\n\t\t\t\t\t: state === \"error\"\n\t\t\t\t\t\t? errorText\n\t\t\t\t\t\t: children;\n\n\t\tconst LoadingVisual =\n\t\t\tstate === \"loading\" ? (\n\t\t\t\tloadingType === \"dots\" ? (\n\t\t\t\t\t<Dots aria-hidden className=\"-ml-1\" />\n\t\t\t\t) : (\n\t\t\t\t\t<Spinner aria-hidden className=\"-ml-1\" />\n\t\t\t\t)\n\t\t\t) : null;\n\n\t\t/* ========== AsChild Pattern Handling ========== */\n\t\tif (asChild) {\n\t\t\tconst child = Children.only(children) as ReactElement<any>;\n\t\t\treturn cloneElement(child, {\n\t\t\t\tclassName: cn(\n\t\t\t\t\tbuttonVariants({ variant, size, clickEffect, hoverEffect, wide }),\n\t\t\t\t\tdebug && \"outline outline-dashed outline-2 outline-fuchsia-500/40\",\n\t\t\t\t\tclassName,\n\t\t\t\t\tchild.props.className,\n\t\t\t\t),\n\t\t\t\t\"aria-busy\": state === \"loading\" || undefined,\n\t\t\t\t\"aria-live\": announceChanges ? \"polite\" : undefined,\n\t\t\t\t\"aria-disabled\":\n\t\t\t\t\t!forceNativeDisabled && effectiveDisabled ? true : undefined,\n\t\t\t\tdisabled:\n\t\t\t\t\tforceNativeDisabled && (disabled || state === \"disabled\")\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\"data-state\": state,\n\t\t\t\tstyle: { ...(child.props.style || {}), minWidth },\n\t\t\t\tonClick: (e: MouseEvent) => {\n\t\t\t\t\tchild.props?.onClick?.(e);\n\t\t\t\t\thandleClick(e as MouseEvent<HTMLButtonElement>);\n\t\t\t\t},\n\t\t\t\tonMouseDown: (e: MouseEvent) => {\n\t\t\t\t\tchild.props?.onMouseDown?.(e);\n\t\t\t\t\thandleMouseDown(e as MouseEvent<HTMLButtonElement>);\n\t\t\t\t},\n\t\t\t\tonMouseUp: (e: MouseEvent) => {\n\t\t\t\t\tchild.props?.onMouseUp?.(e);\n\t\t\t\t\tclearLongPress();\n\t\t\t\t},\n\t\t\t\tonMouseLeave: (e: MouseEvent) => {\n\t\t\t\t\tchild.props?.onMouseLeave?.(e);\n\t\t\t\t\tclearLongPress();\n\t\t\t\t},\n\t\t\t\tonKeyDown: (e: KeyboardEvent) => {\n\t\t\t\t\tchild.props?.onKeyDown?.(e);\n\t\t\t\t\thandleKeyDown(e as KeyboardEvent<HTMLButtonElement>);\n\t\t\t\t},\n\t\t\t\tonKeyUp: (e: KeyboardEvent) => {\n\t\t\t\t\tchild.props?.onKeyUp?.(e);\n\t\t\t\t\tclearLongPress();\n\t\t\t\t},\n\t\t\t\tref: ref,\n\t\t\t\tchildren: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{RippleElement}\n\t\t\t\t\t\t{LoadingVisual}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName=\"sr-only\"\n\t\t\t\t\t\t\taria-live={announceChanges ? \"polite\" : undefined}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{state === \"loading\" ? loadingText : child.props.children}\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t} as any);\n\t\t}\n\n\t\t/* ========== Main Button Render ========== */\n\t\tconst Comp = asChild ? Slot : Motion.button;\n\n\t\treturn (\n\t\t\t<Comp\n\t\t\t\tref={btnRef}\n\t\t\t\ttype={asChild ? undefined : type}\n\t\t\t\tclassName={cn(\n\t\t\t\t\tbuttonVariants({\n\t\t\t\t\t\tvariant,\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tclickEffect,\n\t\t\t\t\t\thoverEffect,\n\t\t\t\t\t\twide,\n\t\t\t\t\t\trounded,\n\t\t\t\t\t\tshadow,\n\t\t\t\t\t}),\n\t\t\t\t\tdebug && \"outline outline-dashed outline-2 outline-fuchsia-500/40\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\taria-busy={state === \"loading\" || undefined}\n\t\t\t\taria-live={announceChanges ? \"polite\" : undefined}\n\t\t\t\taria-disabled={\n\t\t\t\t\t!forceNativeDisabled && effectiveDisabled ? true : undefined\n\t\t\t\t}\n\t\t\t\tdisabled={\n\t\t\t\t\tforceNativeDisabled && (disabled || state === \"disabled\")\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: undefined\n\t\t\t\t}\n\t\t\t\tdata-state={state}\n\t\t\t\tstyle={{\n\t\t\t\t\tminWidth,\n\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t// Only apply overflow hidden for effects that need it\n\t\t\t\t\t...(clickEffect === \"ripple\" ||\n\t\t\t\t\thoverEffect === \"shine\" ||\n\t\t\t\t\thoverEffect === \"shimmer\"\n\t\t\t\t\t\t? { overflow: \"hidden\" }\n\t\t\t\t\t\t: {}),\n\t\t\t\t}}\n\t\t\t\tonClick={handleClick}\n\t\t\t\tonMouseDown={handleMouseDown}\n\t\t\t\tonMouseUp={clearLongPress}\n\t\t\t\tonMouseLeave={clearLongPress}\n\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\tonKeyUp={clearLongPress}\n\t\t\t\t{...getMotionProps(clickEffect, hoverEffect)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{/* Hover effect overlays */}\n\t\t\t\t{hoverEffect === \"shine\" && (\n\t\t\t\t\t<Motion.div\n\t\t\t\t\t\tclassName=\"absolute inset-0 -z-10 pointer-events-none overflow-hidden rounded-[inherit]\"\n\t\t\t\t\t\tinitial={{ x: \"-100%\" }}\n\t\t\t\t\t\twhileHover={{ x: \"100%\" }}\n\t\t\t\t\t\ttransition={{ duration: 0.6, ease: \"easeOut\" }}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\t\t\"linear-gradient(105deg, transparent 40%, rgba(255,255,255,0.5) 50%, transparent 60%)\",\n\t\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{hoverEffect === \"shimmer\" && (\n\t\t\t\t\t<Motion.div\n\t\t\t\t\t\tclassName=\"absolute inset-0 -z-10 pointer-events-none overflow-hidden rounded-[inherit]\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackground:\n\t\t\t\t\t\t\t\t\"linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.4) 50%, transparent 100%)\",\n\t\t\t\t\t\t\twidth: \"200%\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinitial={{ x: \"-200%\" }}\n\t\t\t\t\t\tanimate={{ x: \"200%\" }}\n\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\tduration: 2,\n\t\t\t\t\t\t\trepeat: Infinity,\n\t\t\t\t\t\t\tease: \"linear\",\n\t\t\t\t\t\t\trepeatDelay: 1,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{/* Pulse effect */}\n\t\t\t\t{isPulsing && clickEffect === \"pulse\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Motion.span\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 rounded-[inherit] pointer-events-none dark:hidden\"\n\t\t\t\t\t\t\tinitial={{ boxShadow: \"0 0 0 0 rgba(0, 0, 0, 0.3)\" }}\n\t\t\t\t\t\t\tanimate={{ boxShadow: \"0 0 0 15px rgba(0, 0, 0, 0)\" }}\n\t\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t\tduration: 1,\n\t\t\t\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Motion.span\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 rounded-[inherit] pointer-events-none hidden dark:block\"\n\t\t\t\t\t\t\tinitial={{ boxShadow: \"0 0 0 0 rgba(255, 255, 255, 0.3)\" }}\n\t\t\t\t\t\t\tanimate={{ boxShadow: \"0 0 0 15px rgba(255, 255, 255, 0)\" }}\n\t\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t\tduration: 1,\n\t\t\t\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\n\t\t\t\t{/* Ripple effect */}\n\t\t\t\t{RippleElement}\n\n\t\t\t\t{/* Button content */}\n\t\t\t\t{LoadingVisual}\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"sr-only\"\n\t\t\t\t\taria-live={announceChanges ? \"polite\" : undefined}\n\t\t\t\t/>\n\t\t\t\t{label}\n\t\t\t</Comp>\n\t\t);\n\t},\n);\n\nButton.displayName = \"Button\";\n",
      "type": "registry:ui",
      "target": "components/ui/button.tsx"
    }
  ]
}