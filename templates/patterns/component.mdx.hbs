---
summary: "" # Brief one-line summary for cards and lists
description: "" # SEO meta description (150-160 chars)
icon: # Lucide icon name (e.g., ChevronUp, Loader, Menu)
status: draft # draft | coming-soon | published
---

import { BrowserSupport } from "@app/_components/browser-support";
import { BuildEffort } from "@app/_components/build-effort";
import { FaqStructuredData } from "@app/_components/faq-structured-data";
import { Playground } from "@app/_components/playground";

# {{name}}

<!--
  REQUIRED SECTION
  Clear problem statement and what this pattern solves
-->
## Overview

**{{name}}s** are [brief description of the component and the problem it solves].

<!--
  REQUIRED: Build effort indicator
  Levels: low | medium | high
-->
<BuildEffort
  level="low"
  description="Requires [brief technical requirements]"
/>

<!--
  REQUIRED SECTION
  Help developers understand when this is the right solution
-->
## Use Cases

### When to use:

Use {{name}} when you need to [primary use case].

**Common scenarios include:**

- [Specific scenario with example]
- [Another common scenario]
- [Third typical use case]

### When not to use:

- [Anti-pattern with alternative suggestion]
- [Another anti-pattern with better solution]
- [Common mistake to avoid]

<!--
  OPTIONAL SECTION
  Key advantages of using this pattern
-->
## Benefits

- [User benefit with specific example]
- [Developer benefit with technical detail]
- [Business benefit with metrics if available]

<!--
  OPTIONAL SECTION
  Important limitations or trade-offs
-->
## Drawbacks

- [Performance consideration with mitigation]
- [Complexity trade-off with context]
- [Browser/device limitation if applicable]

<!--
  REQUIRED SECTION
  Visual or structural breakdown of the pattern
-->
## Anatomy

```mermaid
flowchart TB
subgraph {{name}}[{{name}} Structure]
A[Component Part 1] -.->|interaction| B[Component Part 2]
B -.->|data flow| C[Component Part 3]

classDef container stroke:#666,stroke-width:2px
class {{name}} container
end
```

### Component Structure

1. **Container Element**
   - Purpose and role
   - Key attributes needed

2. **Interactive Elements**
   - Buttons/links functionality
   - State management

3. **Content Areas**
   - Dynamic vs static content
   - Loading states

#### Summary of Components

| Component       | Required? | Purpose                         | Notes                |
| --------------- | --------- | ------------------------------- | -------------------- |
| Container       | Yes       | Wrapper for all elements        | Sets boundaries      |
| Trigger         | Yes       | Initiates the action            | Button or link       |
| Content Area    | Yes       | Displays the result             | Can be dynamic       |
| Loading State   | No        | Shows progress                  | Improves UX          |

<!--
  REQUIRED SECTION
  Actionable guidelines for implementation
-->
## Best Practices

### Content
**Do's ‚úÖ**
- Keep content concise and scannable
- Use clear, action-oriented labels
- Provide immediate feedback on actions

**Don'ts ‚ùå**
- Don't use technical jargon in user-facing text
- Avoid overly long descriptions
- Don't hide critical information

### Accessibility
**Do's ‚úÖ**
- Include proper ARIA labels and roles
- Ensure keyboard navigation works
- Maintain sufficient color contrast (WCAG AA)
- Provide focus indicators

**Don'ts ‚ùå**
- Don't rely solely on color to convey meaning
- Avoid removing focus outlines without alternatives
- Don't auto-play media without controls

### Visual Design
**Do's ‚úÖ**
- Maintain consistent spacing and alignment
- Use appropriate visual hierarchy
- Follow platform design conventions
- Consider dark mode support

**Don'ts ‚ùå**
- Don't overcrowd the interface
- Avoid too many competing visual elements
- Don't break established mental models

### Layout & Positioning
**Do's ‚úÖ**
- Ensure responsive behavior on all devices
- Position related elements together
- Maintain logical tab order
- Consider viewport constraints

**Don'ts ‚ùå**
- Don't cover important content
- Avoid fixed positioning that breaks on mobile
- Don't assume desktop-only usage

<!--
  OPTIONAL SECTION (for patterns with variants)
  Different variations or types of the pattern
-->
## {{name}} Variations

### Primary Variation
Description of the primary/default variation

### Secondary Variation
Description of alternative variations

### Contextual Variations
How the pattern changes based on context

<!--
  REQUIRED SECTION
  Examples combining interactive demos and implementation code
  Place interactive Playground demos first for visual patterns,
  followed by static code examples for implementation reference
-->
## Examples

### Interactive Demo

<Playground
  patternType="{{category}}"
  pattern="{{name-lowercase}}"
  example="basic"
/>

### Advanced Demo

<Playground
  patternType="{{category}}"
  pattern="{{name-lowercase}}"
  example="advanced"
/>

### Basic Implementation

```html
<!-- Basic HTML structure for the {{name}} pattern -->
<div class="{{name-lowercase}}">
  <!-- Component markup here -->
</div>
```

## Common Mistakes & Anti-Patterns

### üö´ **Missing Loading States**
**The Problem:**
No feedback during async operations leaves users confused.

**How to Fix It?**
Always show loading indicators for operations taking >500ms.

### üö´ **Poor Error Handling**
**The Problem:**
Generic error messages don't help users recover.

**How to Fix It?**
Provide specific, actionable error messages with recovery options.

### üö´ **Ignoring Edge Cases**
**The Problem:**
Pattern breaks with empty states or extreme data.

**How to Fix It?**
Test with no data, single item, and maximum data scenarios.

<!--
  RECOMMENDED SECTION
  Performance considerations and optimizations
-->
## Performance

### Performance Metrics

**Target Metrics:**

- **First Contentful Paint**: < 100ms for pattern initialization
- **Time to Interactive**: < 200ms for user interaction readiness
- **Bundle Size**: < 5KB minified and gzipped
- **Memory Usage**: Monitor heap size for large datasets
- **Frame Rate**: Maintain 60fps during animations

**Optimization Strategies:**

- **Lazy Loading**: Load pattern only when needed
- **Code Splitting**: Separate heavy dependencies
- **Memoization**: Cache expensive computations
- **Virtual Scrolling**: For large lists or tables
- **Debouncing/Throttling**: For frequent events

**Mobile Performance:**

- **Touch Optimization**: 44x44px minimum touch targets
- **Reduced Animations**: Respect prefers-reduced-motion
- **Network Awareness**: Adapt to connection speed
- **Progressive Enhancement**: Core functionality first
- **Offline Support**: Cache critical resources

<!--
  RECOMMENDED SECTION
  User research and testing insights
-->
## Usability Testing Insights

Research shows that users:

- [Key finding with percentage, e.g., "Expect immediate feedback (85% of users)"]
- [Another research insight with data]
- [User preference or behavior pattern]
- [Common user expectation]
- [Accessibility-related finding]

**Testing Recommendations:**

- Test with real users in your target demographic
- Include users with disabilities in testing
- Test on actual devices, not just simulators
- Conduct both moderated and unmoderated sessions

<!--
  OPTIONAL SECTION
  Analytics and tracking implementation
-->
## Tracking

### Event Tracking

Track key user interactions:

```javascript
// Example tracking implementation
trackEvent('{{name}}_interaction', {
  action: 'click',
  label: 'primary_action',
  value: 1
});
```

### Metrics to Monitor

- Interaction rate
- Error frequency
- Load performance
- User completion rate

### Insights & Optimization Based on Tracking

- A/B test variations
- Identify drop-off points
- Optimize based on usage patterns

<!--
  OPTIONAL SECTION (for multi-language apps)
  Internationalization considerations
-->
## Localization

```json
{
  "{{name}}": {
    "button_label": "Action",
    "placeholder_text": "Enter value...",
    "error_message": "Something went wrong",
    "success_message": "Operation completed"
  }
}
```

**Considerations:**
- Text expansion (German ~30% longer)
- RTL language support
- Date/time formatting
- Number formatting

<!--
  REQUIRED SECTION
  Accessibility requirements and guidelines
-->
## Accessibility

### ARIA Attributes

**Required ARIA attributes:**
- `role`: Define the element's purpose
- `aria-label`: Provide accessible name
- `aria-describedby`: Link to description
- `aria-expanded`: For expandable elements
- `aria-controls`: For controlling other elements

### Keyboard Interaction Pattern

The following table outlines the standard keyboard interactions for {{name}} components.

| Key           | Action                                                                |
| ------------- | --------------------------------------------------------------------- |
| Tab           | Move focus to next interactive element                               |
| Shift + Tab   | Move focus to previous interactive element                           |
| Enter         | Activate the primary action                                          |
| Space         | Toggle selection (for checkboxes/toggles)                            |
| Escape        | Close or cancel operation                                            |
| Arrow Keys    | Navigate between options                                             |

### Screen Reader Support

- Announce state changes
- Provide context for actions
- Include instructions in aria-describedby
- Test with NVDA, JAWS, and VoiceOver

<!--
  OPTIONAL SECTION
  SEO considerations for the pattern
-->
## SEO Considerations

- Use semantic HTML elements for better crawlability
- Provide descriptive labels and captions
- Include schema.org markup for structured data
- Ensure content is accessible without JavaScript
- Use descriptive text for all interactive elements
- Consider Core Web Vitals impact
- Implement proper heading hierarchy
- Include alt text for visual elements

**Structured Data Example:**
```json
{
  "@context": "https://schema.org",
  "@type": "WebPage",
  "name": "{{name}} Pattern",
  "description": "Implementation guide for {{name}}"
}
```

<!--
  REQUIRED SECTION
  Testing strategies and guidelines
-->
## Testing Guidelines

### Functional Testing

**Should ‚úì**

- [ ] Pattern initializes without errors
- [ ] All interactive elements respond correctly
- [ ] State changes are reflected in UI
- [ ] Error states display appropriately
- [ ] Loading states work as expected
- [ ] Pattern works across breakpoints
- [ ] Keyboard navigation functions properly
- [ ] Screen readers announce correctly

### Unit Tests

```javascript
describe('{{name}}', () => {
  it('should render correctly', () => {
    // Test implementation
  });

  it('should handle user interaction', () => {
    // Test implementation
  });
});
```

### E2E Tests

```javascript
test('{{name}} user flow', async ({ page }) => {
  // Navigate to component
  // Interact with component
  // Assert expected behavior
});
```

### Visual Regression Testing

- Capture baseline screenshots
- Test different states and variations
- Check responsive breakpoints

<!--
  OPTIONAL SECTION
  Browser compatibility information
-->
## Browser Support

<BrowserSupport
  features={[
    "CSS Grid",
    "Flexbox",
    "Custom Properties"
  ]}
/>

**Polyfills Required:**
- Feature detection for older browsers
- Progressive enhancement strategy
- Fallback implementations

<!--
  OPTIONAL SECTION (for design system integration)
  Design token specifications
-->
## Design Tokens

These design tokens follow the [Design Tokens Format](https://design-tokens.github.io/community-group/format/) specification and can be used with various token transformation tools to generate platform-specific variables.

```json
{
  "$schema": "https://design-tokens.org/schema.json",
  "{{name-lowercase}}": {
    "container": {
      "background": { "value": "{color.background.primary}", "type": "color" },
      "borderRadius": { "value": "{radius.md}", "type": "dimension" },
      "padding": { "value": "{spacing.md}", "type": "dimension" }
    },
    "content": {
      "color": { "value": "{color.text.primary}", "type": "color" },
      "fontSize": { "value": "{typography.body.fontSize}", "type": "dimension" },
      "lineHeight": { "value": "{typography.body.lineHeight}", "type": "number" }
    },
    "interactive": {
      "background": { "value": "{color.interactive.primary}", "type": "color" },
      "backgroundHover": { "value": "{color.interactive.hover}", "type": "color" },
      "borderColor": { "value": "{color.border.default}", "type": "color" }
    },
    "state": {
      "disabled": {
        "opacity": { "value": "0.5", "type": "number" },
        "cursor": { "value": "not-allowed", "type": "string" }
      },
      "loading": {
        "animation": { "value": "pulse 2s ease-in-out infinite", "type": "string" }
      }
    }
  }
}
```

<!--
  RECOMMENDED SECTION
  Common questions and answers
-->
## Frequently Asked Questions

<FaqStructuredData
  items={[
    {
      question: "When should I use {{name}} instead of [alternative]?",
      answer: "Use {{name}} when [specific use case]. Choose [alternative] when [different use case].",
    },
    {
      question: "How do I make {{name}} accessible?",
      answer: "Follow WCAG guidelines by implementing proper ARIA attributes, keyboard navigation, and screen reader support as outlined in the Accessibility section.",
    },
    {
      question: "What's the performance impact of {{name}}?",
      answer: "The pattern typically adds < 5KB to your bundle and initializes in < 100ms. See the Performance section for optimization strategies.",
    },
  ]}
/>

<!--
  RECOMMENDED SECTION
  Links to related patterns
-->
## Related Patterns

Consider these related patterns when implementing {{name}}:

- [Pattern 1](/patterns/category/pattern-1) - Use when you need similar functionality
- [Pattern 2](/patterns/category/pattern-2) - Complements this pattern for complex flows
- [Pattern 3](/patterns/category/pattern-3) - Alternative approach for different context

<!--
  OPTIONAL SECTION
  External resources and references
-->
## Resources

### Libraries & Frameworks

#### React Components
- [Library Name](https://example.com) ‚Äì Brief description of strengths
- [Another Library](https://example.com) ‚Äì What makes it unique

#### Vue Components
- [Vue Library](https://example.com) ‚Äì Key features
- [Alternative](https://example.com) ‚Äì When to use

#### Vanilla JavaScript
- [Pure JS Library](https://example.com) ‚Äì No framework needed
- [Lightweight Option](https://example.com) ‚Äì Minimal dependencies

### Articles
- [Best Practices for {{name}}](https://example.com) - Comprehensive guide
- [{{name}} Performance Optimization](https://example.com) - Advanced techniques

### Documentation
- [MDN Web Docs](https://developer.mozilla.org) - Web standards reference
- [WCAG Guidelines](https://www.w3.org/WAI/WCAG21/quickref/) - Accessibility standards
- [Lightweight Alternative](https://github.com) - Minimal dependencies

### Tools
- [{{name}} Generator](https://example.com) - Quick starter tool
- [Testing Utilities](https://example.com) - Specialized testing helpers

