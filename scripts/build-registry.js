const { promises: fs } = require("fs");
const path = require("path");

// Get the project root (where this script is located)
const PROJECT_ROOT = path.dirname(__dirname);
const REGISTRY_JSON_PATH = path.join(
	PROJECT_ROOT,
	"packages/registry/registry.json",
);
const OUTPUT_PATH = path.join(PROJECT_ROOT, "packages/registry/.generated");

async function buildRegistryIndex() {
	// Ensure output directory exists
	await fs.mkdir(OUTPUT_PATH, { recursive: true });

	// Read the registry.json file
	const registryContent = await fs.readFile(REGISTRY_JSON_PATH, "utf-8");
	const registry = JSON.parse(registryContent);

	// Filter for blocks that should be shown as examples
	const blockComponents = registry.items.filter(
		(item) => item.type === "registry:block",
	);

	// Generate index content
	let indexContent = `// This file is autogenerated by scripts/build-registry.js
// Do not edit this file directly.
// @ts-nocheck
import * as React from "react";

export const Index: Record<string, any> = {`;

	// Add the Index entries for each block component
	for (const component of blockComponents) {
		const componentName = component.name;
		const description = component.description || `${componentName} component`;
		const componentPath = `../registry/default/blocks/${componentName}`;

		indexContent += `
  "${componentName}": {
    name: "${componentName}",
    description: "${description}",
    type: "${component.type}",
    registryDependencies: ${JSON.stringify(component.registryDependencies || [])},
    files: [${component.files
			?.map((file) => {
				return `{
        path: "${file.path}",
        type: "${file.type}",
        target: "components/blocks/${componentName}.tsx"
      }`;
			})
			.join(", ")}],
    component: React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || "${componentName}"
      return { default: mod.default || mod[exportName] }
    }),
    meta: ${JSON.stringify(component.meta || {})},
  },`;
	}

	indexContent += `
};`;

	// Remove existing file first (like rimraf)
	try {
		await fs.unlink(path.join(OUTPUT_PATH, "index.tsx"));
	} catch (error) {
		// File doesn't exist, that's fine
	}

	// Write the index file
	await fs.writeFile(
		path.join(OUTPUT_PATH, "index.tsx"),
		indexContent,
		"utf-8",
	);

	console.log(
		`âœ… Registry index built with ${blockComponents.length} components`,
	);
}

async function main() {
	try {
		console.log("Building registry...");
		await buildRegistryIndex();
		console.log("Registry build complete!");
	} catch (error) {
		console.error("Failed to build registry:", error);
		process.exit(1);
	}
}

main();
